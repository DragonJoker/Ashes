name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - created

jobs:
  build:
    strategy:
      matrix:
        os: [[ubuntu-latest,x64-linux,gcc], [ubuntu-latest,x64-linux,clang], [windows-latest,x64-windows,msvc], [macos-latest,x64-osx,clang]]
        buildType: [Release]

    runs-on: ${{ matrix.os[0] }}

    steps:
    - uses: actions/checkout@v2

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v4
      with:
        vcpkgGitCommitId: 'c76e5f092a3919edd52ea81e6c7a75af5cff7e39'
        setupOnly: true

    - name: Install dependencies from vcpkg
      run: $VCPKG_ROOT/vcpkg install spirv-cross:${{ matrix.os[1] }} vulkan-headers:${{ matrix.os[1] }}
      shell: bash
  
    - name: Install necessary ccache (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: sudo apt-get install -y --no-install-recommends ccache

    - name: Install dependencies from vcpkg (Linux)
      if: runner.os == 'Linux'
      run: $VCPKG_ROOT/vcpkg install egl-registry:${{ matrix.os[1] }}
      shell: bash

    - name: Checkout submodules
      run: |
        git submodule update --init -- "CMake"

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build-${{ matrix.buildType }}

    - name: Configure Warnings as errors (OFF)
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: echo "PROJ_WAE=OFF" >> $GITHUB_ENV

    - name: Configure GCC version (Linux)
      if: runner.os == 'Linux' && matrix.os[2] == 'gcc'
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: echo "CC=gcc-10" >> $GITHUB_ENV

    - name: Configure G++ version (Linux)
      if: runner.os == 'Linux' && matrix.os[2] == 'gcc'
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: echo "CXX=g++-10" >> $GITHUB_ENV

    - name: Configure Clang version (Linux)
      if: runner.os == 'Linux' && matrix.os[2] == 'clang'
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: echo "CC=clang-12" >> $GITHUB_ENV

    - name: Configure Clang++ version (Linux)
      if: runner.os == 'Linux' && matrix.os[2] == 'clang'
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: echo "CXX=clang++-12" >> $GITHUB_ENV

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.buildType }} -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/package/ashes -DPROJECTS_WARNINGS_AS_ERRORS=$PROJ_WAE -DASHES_BUILD_TEMPLATES=OFF -DASHES_BUILD_TESTS=OFF -DASHES_BUILD_INFO=OFF -DASHES_BUILD_SAMPLES=OFF -DASHES_BUILD_RENDERER_OGL=ON -DASHES_BUILD_RENDERER_D3D11=ON -DASHES_BUILD_RENDERER_TEST=ON

    - name: Configure CMake (Linux)
      if: runner.os == 'Linux'
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.buildType }} -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/package/ashes -DPROJECTS_WARNINGS_AS_ERRORS=$PROJ_WAE -DASHES_BUILD_TEMPLATES=OFF -DASHES_BUILD_TESTS=OFF -DASHES_BUILD_INFO=OFF -DASHES_BUILD_SAMPLES=OFF -DASHES_BUILD_RENDERER_OGL=OFF -DASHES_BUILD_RENDERER_TEST=ON

    - name: Configure CMake (MacOS)
      if: runner.os == 'macOS'
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.buildType }} -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/package/ashes -DPROJECTS_WARNINGS_AS_ERRORS=$PROJ_WAE -DASHES_BUILD_TEMPLATES=OFF -DASHES_BUILD_TESTS=OFF -DASHES_BUILD_INFO=OFF -DASHES_BUILD_SAMPLES=OFF -DASHES_BUILD_RENDERER_OGL=ON -DASHES_BUILD_RENDERER_TEST=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      shell: bash
      run: cmake --build . --config ${{ matrix.buildType }}

    - name: Test
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      shell: bash
      run: ctest -C ${{ matrix.buildType }}

    - name: Prepare package
      if: github.event_name == 'push'
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      shell: bash
      run: cmake --install . --config ${{ matrix.buildType }}

    - name: Zip package
      if: github.event_name == 'push'
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      shell: bash
      run: 7z a $GITHUB_WORKSPACE/Ashes-${{ matrix.os[1] }}.zip $GITHUB_WORKSPACE/package/ashes/

    - name: Upload package
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v2
      with:
        name: Ashes-${{ matrix.os[1] }}.zip
        path: ${{ github.workspace }}/Ashes-${{ matrix.os[1] }}.zip
