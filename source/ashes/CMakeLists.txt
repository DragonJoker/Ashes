project( ashes )

set( ${PROJECT_NAME}_DESCRIPTION "${PROJECT_NAME} library" )
set( ${PROJECT_NAME}_VERSION_MAJOR 1 )
set( ${PROJECT_NAME}_VERSION_MINOR 0 )
set( ${PROJECT_NAME}_VERSION_BUILD 0 )

include_directories(
	${CMAKE_CURRENT_BINARY_DIR}
	${ASHES_SOURCE_DIR}/include
	${ASHES_SOURCE_DIR}/include/ashes
	${ASHES_SOURCE_DIR}/source
	${ASHES_SOURCE_DIR}/source/ashes
	${Vulkan_INCLUDE_DIRS}
)

file( GLOB ${PROJECT_NAME}_SRC_FILES
	${ASHES_SOURCE_DIR}/include/${PROJECT_NAME}/*.c
	${ASHES_SOURCE_DIR}/include/${PROJECT_NAME}/*.cc
	${ASHES_SOURCE_DIR}/include/${PROJECT_NAME}/*.cpp
	${ASHES_SOURCE_DIR}/source/${PROJECT_NAME}/*.c
	${ASHES_SOURCE_DIR}/source/${PROJECT_NAME}/*.cc
	${ASHES_SOURCE_DIR}/source/${PROJECT_NAME}/*.cpp
)

file( GLOB ${PROJECT_NAME}_HDR_FILES
	${ASHES_SOURCE_DIR}/source/${PROJECT_NAME}/*.h
	${ASHES_SOURCE_DIR}/source/${PROJECT_NAME}/*.hh
	${ASHES_SOURCE_DIR}/source/${PROJECT_NAME}/*.hpp
	${ASHES_SOURCE_DIR}/source/${PROJECT_NAME}/*.inl
	${ASHES_SOURCE_DIR}/source/${PROJECT_NAME}/*.inc
)

set( ${PROJECT_NAME}_HDR_FILES
	${${PROJECT_NAME}_HDR_FILES}
	${ASHES_SOURCE_DIR}/include/${PROJECT_NAME}/ashes.h
)

set( ASHES_WIN32 0 )
set( ASHES_XCB 0 )
set( ASHES_XLIB 0 )
set( ASHES_ANDROID 0 )
set( ASHES_MIR 0 )
set( ASHES_WAYLAND 0 )
set( ASHES_IOS 0 )
set( ASHES_MACOS 0 )
set( ASHES_VI 0 )
set( ASHES_XLIB_XRANDR 0 )

if ( WIN32 )
	set( ASHES_WIN32 1 )
elseif ( ANDROID )
	set( ASHES_ANDROID 1 )
else ()
	set( ASHES_XLIB 1 )
endif ()

set( ${PROJECT_NAME}_CONFIG_HEADER
	${CMAKE_BINARY_DIR}/include/${PROJECT_NAME}/ash_platform.h
)

configure_file(
	${ASHES_SOURCE_DIR}/source/${PROJECT_NAME}/ash_platform.h.in
	${${PROJECT_NAME}_CONFIG_HEADER}
	NEWLINE_STYLE LF
)

add_definitions( -DAshesC_EXPORTS )

add_library( ${PROJECT_NAME} SHARED
	${${PROJECT_NAME}_SRC_FILES}
	${${PROJECT_NAME}_HDR_FILES}
	${${PROJECT_NAME}_CONFIG_HEADER}
)

target_link_libraries( ${PROJECT_NAME}
	common
)

set_property( TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 17 )
set_property( TARGET ${PROJECT_NAME} PROPERTY FOLDER "Ashes/Core" )

if ( BUILD_ASHES )
	target_add_doc( ${PROJECT_NAME} "" "*.h *.hpp" )
endif ()

install(
	TARGETS ${PROJECT_NAME}
	COMPONENT ${PROJECT_NAME}
	CONFIGURATIONS Release
	EXPORT ${PROJECT_NAME}
	LIBRARY DESTINATION lib
	RUNTIME DESTINATION bin
)
install(
	TARGETS ${PROJECT_NAME}
	COMPONENT ${PROJECT_NAME}_dev
	CONFIGURATIONS RelWithDebInfo
	EXPORT ${PROJECT_NAME}
	LIBRARY DESTINATION lib/RelWithDebInfo
	RUNTIME DESTINATION bin/RelWithDebInfo
)
install(
	TARGETS ${PROJECT_NAME}
	COMPONENT ${PROJECT_NAME}_dev
	CONFIGURATIONS Debug
	LIBRARY DESTINATION lib/Debug
	RUNTIME DESTINATION bin/Debug
)
target_install_dir_headers( ${PROJECT_NAME}
	${PROJECT_NAME}
	${PROJECT_NAME}
)

add_subdirectory( renderer )
set( ENABLED_RENDERERS ${ENABLED_RENDERERS} PARENT_SCOPE )
