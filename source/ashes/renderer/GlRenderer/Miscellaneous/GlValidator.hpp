/**
*\file
*	Image.h
*\author
*	Sylvain Doremus
*/
#ifndef ___GlRenderer_Validator_HPP___
#define ___GlRenderer_Validator_HPP___
#pragma once

#include "renderer/GlRenderer/Shader/GlShaderDesc.hpp"

namespace ashes::gl
{
	enum GlslAttributeType
		: GLenum
	{
		GLSL_ATTRIBUTE_INT = 0x1404,
		GLSL_ATTRIBUTE_UNSIGNED_INT = 0x1405,
		GLSL_ATTRIBUTE_FLOAT = 0x1406,
		GLSL_ATTRIBUTE_DOUBLE = 0x140A,
		GLSL_ATTRIBUTE_HALF_FLOAT = 0x140B,
		GLSL_ATTRIBUTE_FLOAT_VEC2 = 0x8B50,
		GLSL_ATTRIBUTE_FLOAT_VEC3 = 0x8B51,
		GLSL_ATTRIBUTE_FLOAT_VEC4 = 0x8B52,
		GLSL_ATTRIBUTE_INT_VEC2 = 0x8B53,
		GLSL_ATTRIBUTE_INT_VEC3 = 0x8B54,
		GLSL_ATTRIBUTE_INT_VEC4 = 0x8B55,
		GLSL_ATTRIBUTE_BOOL = 0x8B56,
		GLSL_ATTRIBUTE_BOOL_VEC2 = 0x8B57,
		GLSL_ATTRIBUTE_BOOL_VEC3 = 0x8B58,
		GLSL_ATTRIBUTE_BOOL_VEC4 = 0x8B59,
		GLSL_ATTRIBUTE_FLOAT_MAT2 = 0x8B5A,
		GLSL_ATTRIBUTE_FLOAT_MAT3 = 0x8B5B,
		GLSL_ATTRIBUTE_FLOAT_MAT4 = 0x8B5C,
		GLSL_ATTRIBUTE_SAMPLER_1D = 0x8B5D,
		GLSL_ATTRIBUTE_SAMPLER_2D = 0x8B5E,
		GLSL_ATTRIBUTE_SAMPLER_3D = 0x8B5F,
		GLSL_ATTRIBUTE_SAMPLER_CUBE = 0X8B60,
		GLSL_ATTRIBUTE_SAMPLER_1D_SHADOW = 0x8B61,
		GLSL_ATTRIBUTE_SAMPLER_2D_SHADOW = 0x8B62,
		GLSL_ATTRIBUTE_SAMPLER_2D_RECT = 0X8B63,
		GLSL_ATTRIBUTE_SAMPLER_2D_RECT_SHADOW = 0x8B64,
		GLSL_ATTRIBUTE_FLOAT_MAT2x3 = 0x8B65,
		GLSL_ATTRIBUTE_FLOAT_MAT2x4 = 0x8B66,
		GLSL_ATTRIBUTE_FLOAT_MAT3x2 = 0x8B67,
		GLSL_ATTRIBUTE_FLOAT_MAT3x4 = 0x8B68,
		GLSL_ATTRIBUTE_FLOAT_MAT4x2 = 0x8B69,
		GLSL_ATTRIBUTE_FLOAT_MAT4x3 = 0x8B6A,
		GLSL_ATTRIBUTE_SAMPLER_1D_ARRAY = 0x8DC0,
		GLSL_ATTRIBUTE_SAMPLER_2D_ARRAY = 0x8DC1,
		GLSL_ATTRIBUTE_SAMPLER_BUFFER = 0x8DC2,
		GLSL_ATTRIBUTE_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3,
		GLSL_ATTRIBUTE_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4,
		GLSL_ATTRIBUTE_SAMPLER_CUBE_SHADOW = 0x8DC5,
		GLSL_ATTRIBUTE_UNSIGNED_INT_VEC2 = 0x8DC6,
		GLSL_ATTRIBUTE_UNSIGNED_INT_VEC3 = 0x8DC7,
		GLSL_ATTRIBUTE_UNSIGNED_INT_VEC4 = 0x8DC8,
		GLSL_ATTRIBUTE_INT_SAMPLER_1D = 0x8DC9,
		GLSL_ATTRIBUTE_INT_SAMPLER_2D = 0x8DCA,
		GLSL_ATTRIBUTE_INT_SAMPLER_3D = 0x8DCB,
		GLSL_ATTRIBUTE_INT_SAMPLER_CUBE = 0x8DCC,
		GLSL_ATTRIBUTE_INT_SAMPLER_2D_RECT = 0x8DCD,
		GLSL_ATTRIBUTE_INT_SAMPLER_1D_ARRAY = 0x8DCE,
		GLSL_ATTRIBUTE_INT_SAMPLER_2D_ARRAY = 0x8DCF,
		GLSL_ATTRIBUTE_INT_SAMPLER_BUFFER = 0x8DD0,
		GLSL_ATTRIBUTE_UNSIGNED_INT_SAMPLER_1D = 0x8DD1,
		GLSL_ATTRIBUTE_UNSIGNED_INT_SAMPLER_2D = 0x8DD2,
		GLSL_ATTRIBUTE_UNSIGNED_INT_SAMPLER_3D = 0x8DD3,
		GLSL_ATTRIBUTE_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4,
		GLSL_ATTRIBUTE_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5,
		GLSL_ATTRIBUTE_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6,
		GLSL_ATTRIBUTE_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7,
		GLSL_ATTRIBUTE_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8,
		GLSL_ATTRIBUTE_DOUBLE_MAT2 = 0x8F46,
		GLSL_ATTRIBUTE_DOUBLE_MAT3 = 0x8F47,
		GLSL_ATTRIBUTE_DOUBLE_MAT4 = 0x8F48,
		GLSL_ATTRIBUTE_DOUBLE_MAT2x3 = 0x8F49,
		GLSL_ATTRIBUTE_DOUBLE_MAT2x4 = 0x8F4A,
		GLSL_ATTRIBUTE_DOUBLE_MAT3x2 = 0x8F4B,
		GLSL_ATTRIBUTE_DOUBLE_MAT3x4 = 0x8F4C,
		GLSL_ATTRIBUTE_DOUBLE_MAT4x2 = 0x8F4D,
		GLSL_ATTRIBUTE_DOUBLE_MAT4x3 = 0x8F4E,
		GLSL_ATTRIBUTE_DOUBLE_VEC2 = 0x8FFC,
		GLSL_ATTRIBUTE_DOUBLE_VEC3 = 0x8FFD,
		GLSL_ATTRIBUTE_DOUBLE_VEC4 = 0x8FFE,
		GLSL_ATTRIBUTE_SAMPLER_CUBE_ARRAY = 0x900C,
		GLSL_ATTRIBUTE_SAMPLER_CUBE_ARRAY_SHADOW = 0x900D,
		GLSL_ATTRIBUTE_INT_SAMPLER_CUBE_ARRAY = 0x900E,
		GLSL_ATTRIBUTE_UNSIGNED_INT_SAMPLER_CUBE_ARRAY = 0x900F,
		GLSL_ATTRIBUTE_IMAGE_1D = 0x904C,
		GLSL_ATTRIBUTE_IMAGE_2D = 0x904D,
		GLSL_ATTRIBUTE_IMAGE_3D = 0x904E,
		GLSL_ATTRIBUTE_IMAGE_2D_RECT = 0x904F,
		GLSL_ATTRIBUTE_IMAGE_CUBE = 0x9050,
		GLSL_ATTRIBUTE_IMAGE_BUFFER = 0x9051,
		GLSL_ATTRIBUTE_IMAGE_1D_ARRAY = 0x9052,
		GLSL_ATTRIBUTE_IMAGE_2D_ARRAY = 0x9053,
		GLSL_ATTRIBUTE_IMAGE_CUBE_MAP_ARRAY = 0x9054,
		GLSL_ATTRIBUTE_IMAGE_2D_MULTISAMPLE = 0x9055,
		GLSL_ATTRIBUTE_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056,
		GLSL_ATTRIBUTE_INT_IMAGE_1D = 0x9057,
		GLSL_ATTRIBUTE_INT_IMAGE_2D = 0x9058,
		GLSL_ATTRIBUTE_INT_IMAGE_3D = 0x9059,
		GLSL_ATTRIBUTE_INT_IMAGE_2D_RECT = 0x905A,
		GLSL_ATTRIBUTE_INT_IMAGE_CUBE = 0x905B,
		GLSL_ATTRIBUTE_INT_IMAGE_BUFFER = 0x905C,
		GLSL_ATTRIBUTE_INT_IMAGE_1D_ARRAY = 0x905D,
		GLSL_ATTRIBUTE_INT_IMAGE_2D_ARRAY = 0x905E,
		GLSL_ATTRIBUTE_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F,
		GLSL_ATTRIBUTE_INT_IMAGE_2D_MULTISAMPLE = 0x9060,
		GLSL_ATTRIBUTE_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061,
		GLSL_ATTRIBUTE_UNSIGNED_INT_IMAGE_1D = 0x9062,
		GLSL_ATTRIBUTE_UNSIGNED_INT_IMAGE_2D = 0x9063,
		GLSL_ATTRIBUTE_UNSIGNED_INT_IMAGE_3D = 0x9064,
		GLSL_ATTRIBUTE_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065,
		GLSL_ATTRIBUTE_UNSIGNED_INT_IMAGE_CUBE = 0x9066,
		GLSL_ATTRIBUTE_UNSIGNED_INT_IMAGE_BUFFER = 0x9067,
		GLSL_ATTRIBUTE_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068,
		GLSL_ATTRIBUTE_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069,
		GLSL_ATTRIBUTE_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A,
		GLSL_ATTRIBUTE_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B,
		GLSL_ATTRIBUTE_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C,
		GLSL_ATTRIBUTE_SAMPLER_2D_MULTISAMPLE = 0x9108,
		GLSL_ATTRIBUTE_INT_SAMPLER_2D_MULTISAMPLE = 0x9109,
		GLSL_ATTRIBUTE_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A,
		GLSL_ATTRIBUTE_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B,
		GLSL_ATTRIBUTE_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C,
		GLSL_ATTRIBUTE_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D,
	};

	std::string getName( GlslAttributeType type )noexcept;
	bool isImage( GlslAttributeType type )noexcept;
	bool isSamplerBuffer( GlslAttributeType type )noexcept;
	bool isImageBuffer( GlslAttributeType type )noexcept;
	bool isSampler( GlslAttributeType type )noexcept;
	ConstantFormat getConstantFormat( GlslAttributeType type )noexcept;
	ImageFormat getImageFormat( GlslAttributeType type )noexcept;
	SamplerFormat getSamplerFormat( GlslAttributeType type )noexcept;
	uint32_t getSize( GlslAttributeType type )noexcept;
	VkFormat getAttributeFormat( GlslAttributeType type )noexcept;

	InputsLayout getInputs( ContextLock const & context
		, VkShaderStageFlagBits stage
		, GLuint program );
	ConstantsLayout & getPushConstants( ContextLock const & context
		, ConstantsLayout & constants
		, VkShaderStageFlagBits stage
		, GLuint program );
	InterfaceBlocksLayout getUniformBuffers( ContextLock const & context
		, VkShaderStageFlagBits stage
		, GLuint program );
	InterfaceBlocksLayout getStorageBuffers( ContextLock const & context
		, VkShaderStageFlagBits stage
		, GLuint program );
	SamplersLayout getSamplerBuffers( ContextLock const & context
		, VkShaderStageFlagBits stage
		, GLuint program );
	SamplersLayout getSamplers( ContextLock const & context
		, VkShaderStageFlagBits stage
		, GLuint program );
	ImagesLayout getImageBuffers( ContextLock const & context
		, VkShaderStageFlagBits stage
		, GLuint program );
	ImagesLayout getImages( ContextLock const & context
		, VkShaderStageFlagBits stage
		, GLuint program );
	ShaderDesc getShaderDesc( ContextLock const & context
		, ConstantsLayout & constants
		, VkShaderStageFlagBits stage
		, GLuint program
		, bool separable );

	void validatePipeline( ContextLock const & context
		, VkPipelineLayout layout
		, GLuint program
		, VkPipelineVertexInputStateCreateInfo const & vertexInputState
		, VkRenderPass renderPass );
}

#endif
