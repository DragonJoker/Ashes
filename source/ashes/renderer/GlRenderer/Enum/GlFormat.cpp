#include "GlRendererPrerequisites.hpp"

namespace ashes::gl
{
	std::string getName( GlInternal value )
	{
		switch ( value )
		{
		case GL_INTERNAL_UNSUPPORTED:
			return "GL_UNSUPPORTED";
			
		case GL_INTERNAL_R4G4B4A4_UNORM_PACK16:
			return "GL_RGBA4";

		case GL_INTERNAL_R5G6B5_UNORM_PACK16:
			return "GL_R5G6B5";

		case GL_INTERNAL_R5G5B5A1_UNORM_PACK16:
			return "GL_RGB5_A1";

		case GL_INTERNAL_R8_UNORM:
			return "GL_R8";

		case GL_INTERNAL_R8_SNORM:
			return "GL_R8_SNORM";

		case GL_INTERNAL_R8_UINT:
			return "GL_R8UI";

		case GL_INTERNAL_R8_SINT:
			return "GL_R8I";

		case GL_INTERNAL_R8_SRGB:
			return "GL_SR8";

		case GL_INTERNAL_R8G8_UNORM:
			return "GL_RG8";

		case GL_INTERNAL_R8G8_SNORM:
			return "GL_RG8_SNORM";

		case GL_INTERNAL_R8G8_UINT:
			return "GL_RG8UI";

		case GL_INTERNAL_R8G8_SINT:
			return "GL_RG8I";

		case GL_INTERNAL_R8G8_SRGB:
			return "GL_SRG8";

		case GL_INTERNAL_R8G8B8_UNORM:
			return "GL_RGB8";

		case GL_INTERNAL_R8G8B8_SNORM:
			return "GL_RGB8_SNORM";

		case GL_INTERNAL_R8G8B8_UINT:
			return "GL_RGB8UI";

		case GL_INTERNAL_R8G8B8_SINT:
			return "GL_RGB8I";

		case GL_INTERNAL_R8G8B8_SRGB:
			return "GL_SRGB8";

		case GL_INTERNAL_R8G8B8A8_UNORM:
			return "GL_RGBA8";

		case GL_INTERNAL_R8G8B8A8_SNORM:
			return "GL_RGBA8_SNORM";

		case GL_INTERNAL_R8G8B8A8_UINT:
			return "GL_RGBA8UI";

		case GL_INTERNAL_R8G8B8A8_SINT:
			return "GL_RGBA8I";

		case GL_INTERNAL_R8G8B8A8_SRGB:
			return "GL_SRGBA8";

		case GL_INTERNAL_R10G10B10A2_UNORM_PACK32:
			return "GL_RGB10_A2";

		case GL_INTERNAL_R10G10B10A2_UINT_PACK32:
			return "GL_RGB10_A2UI";

		case GL_INTERNAL_R16_UNORM:
			return "GL_R16";

		case GL_INTERNAL_R16_SNORM:
			return "GL_R16_SNORM";

		case GL_INTERNAL_R16_SINT:
			return "GL_R16I";

		case GL_INTERNAL_R16_UINT:
			return "GL_R16UI";

		case GL_INTERNAL_R16_SFLOAT:
			return "GL_R16F";

		case GL_INTERNAL_R16G16_UNORM:
			return "GL_RG16";

		case GL_INTERNAL_R16G16_SNORM:
			return "GL_RG16_SNORM";

		case GL_INTERNAL_R16G16_UINT:
			return "GL_RG16UI";

		case GL_INTERNAL_R16G16_SINT:
			return "GL_RG16I";

		case GL_INTERNAL_R16G16_SFLOAT:
			return "GL_RG16F";

		case GL_INTERNAL_R16G16B16_UNORM:
			return "GL_RGB16";

		case GL_INTERNAL_R16G16B16_SNORM:
			return "GL_RGB16_SNORM";

		case GL_INTERNAL_R16G16B16_UINT:
			return "GL_RGB16UI";

		case GL_INTERNAL_R16G16B16_SINT:
			return "GL_RGB16I";

		case GL_INTERNAL_R16G16B16_SFLOAT:
			return "GL_RGB16F";

		case GL_INTERNAL_R16G16B16A16_UNORM:
			return "GL_RGBA16";

		case GL_INTERNAL_R16G16B16A16_SNORM:
			return "GL_RGBA16_SNORM";

		case GL_INTERNAL_R16G16B16A16_UINT:
			return "GL_RGBA16UI";

		case GL_INTERNAL_R16G16B16A16_SINT:
			return "GL_RGBA16I";

		case GL_INTERNAL_R16G16B16A16_SFLOAT:
			return "GL_RGBA16F";

		case GL_INTERNAL_R32_SINT:
			return "GL_R32I";

		case GL_INTERNAL_R32_UINT:
			return "GL_R32UI";

		case GL_INTERNAL_R32_SFLOAT:
			return "GL_R32F";

		case GL_INTERNAL_R32G32_UINT:
			return "GL_RG32UI";

		case GL_INTERNAL_R32G32_SINT:
			return "GL_RG32I";

		case GL_INTERNAL_R32G32_SFLOAT:
			return "GL_RG32F";

		case GL_INTERNAL_R32G32B32_UINT:
			return "GL_RGB32UI";

		case GL_INTERNAL_R32G32B32_SINT:
			return "GL_RGB32I";

		case GL_INTERNAL_R32G32B32_SFLOAT:
			return "GL_RGB32F";

		case GL_INTERNAL_R32G32B32A32_UINT:
			return "GL_RGBA32UI";

		case GL_INTERNAL_R32G32B32A32_SINT:
			return "GL_RGBA32I";

		case GL_INTERNAL_R32G32B32A32_SFLOAT:
			return "GL_RGBA32F";

		case GL_INTERNAL_B10G11R11_UFLOAT_PACK32:
			return "GL_R11F_G11F_B10F";

		case GL_INTERNAL_E5B9G9R9_UFLOAT_PACK32:
			return "GL_RGB9_E5";

		case GL_INTERNAL_D16_UNORM:
			return "GL_DEPTH_COMPONENT16";

		case GL_INTERNAL_D24_UNORM_S8_UINT:
			return "GL_DEPTH_COMPONENT24_S8";

		case GL_INTERNAL_D32_SFLOAT:
			return "GL_DEPTH_COMPONENT32F";

		case GL_INTERNAL_D32_SFLOAT_S8_UINT:
			return "GL_DEPTH32F_STENCIL8";

		case GL_INTERNAL_S_INDEX8:
			return "GL_STENCIL_INDEX8";

		case GL_INTERNAL_BC1_RGB_UNORM_BLOCK:
			return "GL_COMPRESSED_RGB_S3TC_DXT1";

		case GL_INTERNAL_BC1_RGBA_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_S3TC_DXT1";

		case GL_INTERNAL_BC2_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_S3TC_DXT3";

		case GL_INTERNAL_BC3_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_S3TC_DXT5";

		case GL_INTERNAL_BC1_RGB_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB_S3TC_DXT1";

		case GL_INTERNAL_BC1_RGBA_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1";

		case GL_INTERNAL_BC2_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3";

		case GL_INTERNAL_BC3_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5";

		case GL_INTERNAL_BC4_UNORM_BLOCK:
			return "GL_COMPRESSED_RED_RGTC1";

		case GL_INTERNAL_BC4_SNORM_BLOCK:
			return "GL_COMPRESSED_SIGNED_RED_RGTC1";

		case GL_INTERNAL_BC5_UNORM_BLOCK:
			return "GL_COMPRESSED_RG_RGTC2";

		case GL_INTERNAL_BC5_SNORM_BLOCK:
			return "GL_COMPRESSED_SIGNED_RG_RGTC2";

		case GL_INTERNAL_BC6H_UFLOAT_BLOCK:
			return "GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT";

		case GL_INTERNAL_BC6H_SFLOAT_BLOCK:
			return "GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT";

		case GL_INTERNAL_BC7_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_BPTC_UNORM";

		case GL_INTERNAL_BC7_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM";

		case GL_INTERNAL_ETC2_R8G8B8_UNORM_BLOCK:
			return "GL_COMPRESSED_RGB8_ETC2";

		case GL_INTERNAL_ETC2_R8G8B8_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ETC2";

		case GL_INTERNAL_ETC2_R8G8B8A1_UNORM_BLOCK:
			return "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2";

		case GL_INTERNAL_ETC2_R8G8B8A1_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2";

		case GL_INTERNAL_ETC2_R8G8B8A8_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA8_ETC2_EAC";

		case GL_INTERNAL_ETC2_R8G8B8A8_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC";

		case GL_INTERNAL_EAC_R11_UNORM_BLOCK:
			return "GL_COMPRESSED_R11_EAC";

		case GL_INTERNAL_EAC_R11_SNORM_BLOCK:
			return "GL_COMPRESSED_SIGNED_R11_EAC";

		case GL_INTERNAL_EAC_R11G11_UNORM_BLOCK:
			return "GL_COMPRESSED_RG11_EAC";

		case GL_INTERNAL_EAC_R11G11_SNORM_BLOCK:
			return "GL_COMPRESSED_SIGNED_RG11_EAC";

		case GL_INTERNAL_ASTC_4x4_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_4x4";

		case GL_INTERNAL_ASTC_5x4_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_5x4";

		case GL_INTERNAL_ASTC_5x5_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_5x5";

		case GL_INTERNAL_ASTC_6x5_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_6x5";

		case GL_INTERNAL_ASTC_6x6_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_6x6";

		case GL_INTERNAL_ASTC_8x5_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_8x5";

		case GL_INTERNAL_ASTC_8x6_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_8x6";

		case GL_INTERNAL_ASTC_8x8_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_8x8";

		case GL_INTERNAL_ASTC_10x5_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_10x5";

		case GL_INTERNAL_ASTC_10x6_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_10x6";

		case GL_INTERNAL_ASTC_10x8_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_10x8";

		case GL_INTERNAL_ASTC_10x10_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_10x10";

		case GL_INTERNAL_ASTC_12x10_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_12x10";

		case GL_INTERNAL_ASTC_12x12_UNORM_BLOCK:
			return "GL_COMPRESSED_RGBA_ASTC_12x12";

		case GL_INTERNAL_ASTC_4x4_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4";

		case GL_INTERNAL_ASTC_5x4_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4";

		case GL_INTERNAL_ASTC_5x5_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5";

		case GL_INTERNAL_ASTC_6x5_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5";

		case GL_INTERNAL_ASTC_6x6_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6";

		case GL_INTERNAL_ASTC_8x5_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5";

		case GL_INTERNAL_ASTC_8x6_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6";

		case GL_INTERNAL_ASTC_8x8_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8";

		case GL_INTERNAL_ASTC_10x5_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5";

		case GL_INTERNAL_ASTC_10x6_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6";

		case GL_INTERNAL_ASTC_10x8_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8";

		case GL_INTERNAL_ASTC_10x10_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10";

		case GL_INTERNAL_ASTC_12x10_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10";

		case GL_INTERNAL_ASTC_12x12_SRGB_BLOCK:
			return "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12";


		default:
			assert( false && "Unupported GlInternal" );
			return "GlInternal_UNKNOWN";
		}
	}

	std::string getName( GlFormat value )
	{
		switch ( value )
		{
		case GL_FORMAT_S:
			return "GL_STENCIL_INDEX";

		case GL_FORMAT_D:
			return "GL_DEPTH_COMPONENT";

		case GL_FORMAT_R:
			return "GL_RED";

		case GL_FORMAT_R_INTEGER:
			return "GL_RED_INTEGER";

		case GL_FORMAT_RGB:
			return "GL_RGB";

		case GL_FORMAT_RGB_INTEGER:
			return "GL_RGB_INTEGER";

		case GL_FORMAT_RGBA:
			return "GL_RGBA";

		case GL_FORMAT_RGBA_INTEGER:
			return "GL_RGBA_INTEGER";

		case GL_FORMAT_ABGR:
			return "GL_ABGR";

		case GL_FORMAT_BGR:
			return "GL_BGR";

		case GL_FORMAT_BGR_INTEGER:
			return "GL_BGR_INTEGER";

		case GL_FORMAT_BGRA:
			return "GL_BGRA";

		case GL_FORMAT_BGRA_INTEGER:
			return "GL_BGRA_INTEGER";

		case GL_FORMAT_RG:
			return "GL_RG";

		case GL_FORMAT_RG_INTEGER:
			return "GL_RG_INTEGER";

		case GL_FORMAT_DS:
			return "GL_DEPTH_STENCIL";

		case GL_FORMAT_R11F_G11F_B10F:
			return "GL_R11F_G11F_B10F";
			
		case GL_FORMAT_E5B9G9R9_UFLOAT:
			return "GL_RGB9_E5";

		default:
			assert( false && "Unupported GlFormat" );
			return "GlFormat_UNKNOWN";
		}
	}

	std::string getName( GlType value )
	{
		switch ( value )
		{
		case GL_TYPE_I8:
			return "GL_SIGNED_BYTE";

		case GL_TYPE_UI8:
			return "GL_UNSIGNED_BYTE";

		case GL_TYPE_I16:
			return "GL_SIGNED_SHORT";

		case GL_TYPE_UI16:
			return "GL_UNSIGNED_SHORT";

		case GL_TYPE_I32:
			return "GL_SIGNED_INT";

		case GL_TYPE_UI32:
			return "GL_UNSIGNED_INT";

		case GL_TYPE_F32:
			return "GL_FLOAT";

		case GL_TYPE_F16:
			return "GL_HALF_FLOAT";

		case GL_TYPE_US_4_4_4_4:
			return "GL_UNSIGNED_SHORT_4_4_4_4";

		case GL_TYPE_US_5_5_5_1:
			return "GL_UNSIGNED_SHORT_5_5_5_1";
			
		case GL_TYPE_US_1_5_5_5_REV:
			return "GL_UNSIGNED_SHORT_1_5_5_5_REV";

		case GL_TYPE_UI_8_8_8_8:
			return "GL_UNSIGNED_INT_8_8_8_8";
			
		case GL_TYPE_UI_8_8_8_8_REV:
			return "GL_UNSIGNED_INT_8_8_8_8_REV";

		case GL_TYPE_UI_2_10_10_10_REV:
			return "GL_UNSIGNED_INT_2_10_10_10_REV";

		case GL_TYPE_US_5_6_5:
			return "GL_UNSIGNED_SHORT_5_6_5";

		case GL_TYPE_UI_24_8:
			return "GL_UNSIGNED_INT_24_8";

		case GL_TYPE_32F_UI24_8:
			return "GL_FLOAT_UNSIGNED_INT_24_8";

		case GL_UI_5_9_9_9_REV:
			return "GL_UNSIGNED_INT_5_9_9_9";

		case GL_UI_10F_11F_11F_REV:
			return "GL_FLOAT_10F_11F_11F";

		default:
			assert( false && "Unupported GlType" );
			return "GlType_UNKNOWN";
		}
	}

	bool isSupportedInternal( VkFormat const & format )noexcept
	{
		return getInternalFormat( format ) != GL_INTERNAL_UNSUPPORTED;
	}

	GlInternal getInternalFormat( VkFormat const & format )noexcept
	{
		switch ( format )
		{
		//case VK_FORMAT_R4G4_UNORM_PACK8: return GL_INTERNAL_L4A4_UNORM_PACK16;
		case VK_FORMAT_R4G4B4A4_UNORM_PACK16: return GL_INTERNAL_R4G4B4A4_UNORM_PACK16;
		case VK_FORMAT_B4G4R4A4_UNORM_PACK16: return GL_INTERNAL_R4G4B4A4_UNORM_PACK16;
		case VK_FORMAT_R5G6B5_UNORM_PACK16: return GL_INTERNAL_R5G6B5_UNORM_PACK16;
		case VK_FORMAT_B5G6R5_UNORM_PACK16: return GL_INTERNAL_R5G6B5_UNORM_PACK16;
		case VK_FORMAT_R5G5B5A1_UNORM_PACK16: return GL_INTERNAL_R5G5B5A1_UNORM_PACK16;
		case VK_FORMAT_B5G5R5A1_UNORM_PACK16: return GL_INTERNAL_R5G5B5A1_UNORM_PACK16;
		case VK_FORMAT_A1R5G5B5_UNORM_PACK16: return GL_INTERNAL_R5G5B5A1_UNORM_PACK16;
		case VK_FORMAT_R8_UNORM: return GL_INTERNAL_R8_UNORM;
		case VK_FORMAT_R8_SNORM: return GL_INTERNAL_R8_SNORM;
		//case VK_FORMAT_R8_USCALED: return GL_INTERNAL_R8_UINT;
		//case VK_FORMAT_R8_SSCALED: return GL_INTERNAL_R8_SINT;
		case VK_FORMAT_R8_UINT: return GL_INTERNAL_R8_UINT;
		case VK_FORMAT_R8_SINT: return GL_INTERNAL_R8_SINT;
		case VK_FORMAT_R8_SRGB: return GL_INTERNAL_R8_SRGB;
		case VK_FORMAT_R8G8_UNORM: return GL_INTERNAL_R8G8_UNORM;
		case VK_FORMAT_R8G8_SNORM: return GL_INTERNAL_R8G8_SNORM;
		//case VK_FORMAT_R8G8_USCALED: return GL_INTERNAL_R8G8_UINT;
		//case VK_FORMAT_R8G8_SSCALED: return GL_INTERNAL_R8G8_SINT;
		case VK_FORMAT_R8G8_UINT: return GL_INTERNAL_R8G8_UINT;
		case VK_FORMAT_R8G8_SINT: return GL_INTERNAL_R8G8_SINT;
		case VK_FORMAT_R8G8_SRGB: return GL_INTERNAL_R8G8_SRGB;
		case VK_FORMAT_R8G8B8_UNORM: return GL_INTERNAL_R8G8B8_UNORM;
		case VK_FORMAT_R8G8B8_SNORM: return GL_INTERNAL_R8G8B8_SNORM;
		//case VK_FORMAT_R8G8B8_USCALED: return GL_INTERNAL_R8G8B8_UINT;
		//case VK_FORMAT_R8G8B8_SSCALED: return GL_INTERNAL_R8G8B8_SINT;
		case VK_FORMAT_R8G8B8_UINT: return GL_INTERNAL_R8G8B8_UINT;
		case VK_FORMAT_R8G8B8_SINT: return GL_INTERNAL_R8G8B8_SINT;
		case VK_FORMAT_R8G8B8_SRGB: return GL_INTERNAL_R8G8B8_SRGB;
		case VK_FORMAT_B8G8R8_UNORM: return GL_INTERNAL_R8G8B8_UNORM;
		case VK_FORMAT_B8G8R8_SNORM: return GL_INTERNAL_R8G8B8_SNORM;
		//case VK_FORMAT_B8G8R8_USCALED: return GL_INTERNAL_R8G8B8_UINT;
		//case VK_FORMAT_B8G8R8_SSCALED: return GL_INTERNAL_R8G8B8_SINT;
		case VK_FORMAT_B8G8R8_UINT: return GL_INTERNAL_R8G8B8_UINT;
		case VK_FORMAT_B8G8R8_SINT: return GL_INTERNAL_R8G8B8_SINT;
		case VK_FORMAT_B8G8R8_SRGB: return GL_INTERNAL_R8G8B8_SRGB;
		case VK_FORMAT_R8G8B8A8_UNORM: return GL_INTERNAL_R8G8B8A8_UNORM;
		case VK_FORMAT_R8G8B8A8_SNORM: return GL_INTERNAL_R8G8B8A8_SNORM;
		//case VK_FORMAT_R8G8B8A8_USCALED: return GL_INTERNAL_R8G8B8A8_UINT;
		//case VK_FORMAT_R8G8B8A8_SSCALED: return GL_INTERNAL_R8G8B8A8_SINT;
		case VK_FORMAT_R8G8B8A8_UINT: return GL_INTERNAL_R8G8B8A8_UINT;
		case VK_FORMAT_R8G8B8A8_SINT: return GL_INTERNAL_R8G8B8A8_SINT;
		case VK_FORMAT_R8G8B8A8_SRGB: return GL_INTERNAL_R8G8B8A8_SRGB;
		case VK_FORMAT_B8G8R8A8_UNORM: return GL_INTERNAL_R8G8B8A8_UNORM;
		case VK_FORMAT_B8G8R8A8_SNORM: return GL_INTERNAL_R8G8B8A8_SNORM;
		//case VK_FORMAT_B8G8R8A8_USCALED: return GL_INTERNAL_R8G8B8A8_UINT;
		//case VK_FORMAT_B8G8R8A8_SSCALED: return GL_INTERNAL_R8G8B8A8_SINT;
		case VK_FORMAT_B8G8R8A8_UINT: return GL_INTERNAL_R8G8B8A8_UINT;
		case VK_FORMAT_B8G8R8A8_SINT: return GL_INTERNAL_R8G8B8A8_SINT;
		case VK_FORMAT_B8G8R8A8_SRGB: return GL_INTERNAL_R8G8B8A8_SRGB;
		case VK_FORMAT_A8B8G8R8_UNORM_PACK32: return GL_INTERNAL_R8G8B8A8_UNORM;
		case VK_FORMAT_A8B8G8R8_SNORM_PACK32: return GL_INTERNAL_R8G8B8A8_SNORM;
		//case VK_FORMAT_A8B8G8R8_USCALED_PACK32: return GL_INTERNAL_R8G8B8A8_UINT;
		//case VK_FORMAT_A8B8G8R8_SSCALED_PACK32: return GL_INTERNAL_R8G8B8A8_SINT;
		case VK_FORMAT_A8B8G8R8_UINT_PACK32: return GL_INTERNAL_R8G8B8A8_UINT;
		case VK_FORMAT_A8B8G8R8_SINT_PACK32: return GL_INTERNAL_R8G8B8A8_SINT;
		case VK_FORMAT_A8B8G8R8_SRGB_PACK32: return GL_INTERNAL_R8G8B8A8_SRGB;
		case VK_FORMAT_A2R10G10B10_UNORM_PACK32: return GL_INTERNAL_R10G10B10A2_UNORM_PACK32;
		//case VK_FORMAT_A2R10G10B10_SNORM_PACK32: return GL_INTERNAL_A2R10G10B10_SNORM_PACK32;
		//case VK_FORMAT_A2R10G10B10_USCALED_PACK32: return GL_INTERNAL_R10G10B10A2_UINT_PACK32;
		//case VK_FORMAT_A2R10G10B10_SSCALED_PACK32: return GL_INTERNAL_A2R10G10B10_SSCALED_PACK32;
		case VK_FORMAT_A2R10G10B10_UINT_PACK32: return GL_INTERNAL_R10G10B10A2_UINT_PACK32;
		//case VK_FORMAT_A2R10G10B10_SINT_PACK32: return GL_INTERNAL_A2R10G10B10_SINT_PACK32;
		case VK_FORMAT_A2B10G10R10_UNORM_PACK32: return GL_INTERNAL_R10G10B10A2_UNORM_PACK32;
		//case VK_FORMAT_A2B10G10R10_SNORM_PACK32: return GL_INTERNAL_A2B10G10R10_SNORM_PACK32;
		//case VK_FORMAT_A2B10G10R10_USCALED_PACK32: return GL_INTERNAL_R10G10B10A2_UINT_PACK32;
		//case VK_FORMAT_A2B10G10R10_SSCALED_PACK32: return GL_INTERNAL_A2B10G10R10_SSCALED_PACK32;
		case VK_FORMAT_A2B10G10R10_UINT_PACK32: return GL_INTERNAL_R10G10B10A2_UINT_PACK32;
		//case VK_FORMAT_A2B10G10R10_SINT_PACK32: return GL_INTERNAL_A2B10G10R10_SINT_PACK32;
		case VK_FORMAT_R16_UNORM: return GL_INTERNAL_R16_UNORM;
		case VK_FORMAT_R16_SNORM: return GL_INTERNAL_R16_SNORM;
		//case VK_FORMAT_R16_USCALED: return GL_INTERNAL_R16_UINT;
		//case VK_FORMAT_R16_SSCALED: return GL_INTERNAL_R16_SINT;
		case VK_FORMAT_R16_UINT: return GL_INTERNAL_R16_UINT;
		case VK_FORMAT_R16_SINT: return GL_INTERNAL_R16_SINT;
		case VK_FORMAT_R16_SFLOAT: return GL_INTERNAL_R16_SFLOAT;
		case VK_FORMAT_R16G16_UNORM: return GL_INTERNAL_R16G16_UNORM;
		case VK_FORMAT_R16G16_SNORM: return GL_INTERNAL_R16G16_SNORM;
		//case VK_FORMAT_R16G16_USCALED: return GL_INTERNAL_R16G16_UINT;
		//case VK_FORMAT_R16G16_SSCALED: return GL_INTERNAL_R16G16_SINT;
		case VK_FORMAT_R16G16_UINT: return GL_INTERNAL_R16G16_UINT;
		case VK_FORMAT_R16G16_SINT: return GL_INTERNAL_R16G16_SINT;
		case VK_FORMAT_R16G16_SFLOAT: return GL_INTERNAL_R16G16_SFLOAT;
		case VK_FORMAT_R16G16B16_UNORM: return GL_INTERNAL_R16G16B16_UNORM;
		case VK_FORMAT_R16G16B16_SNORM: return GL_INTERNAL_R16G16B16_SNORM;
		//case VK_FORMAT_R16G16B16_USCALED: return GL_INTERNAL_R16G16B16_UINT;
		//case VK_FORMAT_R16G16B16_SSCALED: return GL_INTERNAL_R16G16B16_SINT;
		case VK_FORMAT_R16G16B16_UINT: return GL_INTERNAL_R16G16B16_UINT;
		case VK_FORMAT_R16G16B16_SINT: return GL_INTERNAL_R16G16B16_SINT;
		case VK_FORMAT_R16G16B16_SFLOAT: return GL_INTERNAL_R16G16B16_SFLOAT;
		case VK_FORMAT_R16G16B16A16_UNORM: return GL_INTERNAL_R16G16B16A16_UNORM;
		case VK_FORMAT_R16G16B16A16_SNORM: return GL_INTERNAL_R16G16B16A16_SNORM;
		//case VK_FORMAT_R16G16B16A16_USCALED: return GL_INTERNAL_R16G16B16A16_UINT;
		//case VK_FORMAT_R16G16B16A16_SSCALED: return GL_INTERNAL_R16G16B16A16_SINT;
		case VK_FORMAT_R16G16B16A16_UINT: return GL_INTERNAL_R16G16B16A16_UINT;
		case VK_FORMAT_R16G16B16A16_SINT: return GL_INTERNAL_R16G16B16A16_SINT;
		case VK_FORMAT_R16G16B16A16_SFLOAT: return GL_INTERNAL_R16G16B16A16_SFLOAT;
		case VK_FORMAT_R32_UINT: return GL_INTERNAL_R32_UINT;
		case VK_FORMAT_R32_SINT: return GL_INTERNAL_R32_SINT;
		case VK_FORMAT_R32_SFLOAT: return GL_INTERNAL_R32_SFLOAT;
		case VK_FORMAT_R32G32_UINT: return GL_INTERNAL_R32G32_UINT;
		case VK_FORMAT_R32G32_SINT: return GL_INTERNAL_R32G32_SINT;
		case VK_FORMAT_R32G32_SFLOAT: return GL_INTERNAL_R32G32_SFLOAT;
		case VK_FORMAT_R32G32B32_UINT: return GL_INTERNAL_R32G32B32_UINT;
		case VK_FORMAT_R32G32B32_SINT: return GL_INTERNAL_R32G32B32_SINT;
		case VK_FORMAT_R32G32B32_SFLOAT: return GL_INTERNAL_R32G32B32_SFLOAT;
		case VK_FORMAT_R32G32B32A32_UINT: return GL_INTERNAL_R32G32B32A32_UINT;
		case VK_FORMAT_R32G32B32A32_SINT: return GL_INTERNAL_R32G32B32A32_SINT;
		case VK_FORMAT_R32G32B32A32_SFLOAT: return GL_INTERNAL_R32G32B32A32_SFLOAT;
		//case VK_FORMAT_R64_UINT: return GL_INTERNAL_R64_UINT;
		//case VK_FORMAT_R64_SINT: return GL_INTERNAL_R64_SINT;
		//case VK_FORMAT_R64_SFLOAT: return GL_INTERNAL_R64_SFLOAT;
		//case VK_FORMAT_R64G64_UINT: return GL_INTERNAL_R64G64_UINT;
		//case VK_FORMAT_R64G64_SINT: return GL_INTERNAL_R64G64_SINT;
		//case VK_FORMAT_R64G64_SFLOAT: return GL_INTERNAL_R64G64_SFLOAT;
		//case VK_FORMAT_R64G64B64_UINT: return GL_INTERNAL_R64G64B64_UINT;
		//case VK_FORMAT_R64G64B64_SINT: return GL_INTERNAL_R64G64B64_SINT;
		//case VK_FORMAT_R64G64B64_SFLOAT: return GL_INTERNAL_R64G64B64_SFLOAT;
		//case VK_FORMAT_R64G64B64A64_UINT: return GL_INTERNAL_R64G64B64A64_UINT;
		//case VK_FORMAT_R64G64B64A64_SINT: return GL_INTERNAL_R64G64B64A64_SINT;
		//case VK_FORMAT_R64G64B64A64_SFLOAT: return GL_INTERNAL_R64G64B64A64_SFLOAT;
		case VK_FORMAT_B10G11R11_UFLOAT_PACK32: return GL_INTERNAL_B10G11R11_UFLOAT_PACK32;
		case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: return GL_INTERNAL_E5B9G9R9_UFLOAT_PACK32;
		case VK_FORMAT_D16_UNORM: return GL_INTERNAL_D16_UNORM;
		//case VK_FORMAT_X8_D24_UNORM_PACK32: return GL_INTERNAL_X8_D24_UNORM_PACK32;
		case VK_FORMAT_D32_SFLOAT: return GL_INTERNAL_D32_SFLOAT;
		case VK_FORMAT_S8_UINT: return GL_INTERNAL_S_INDEX8;
		//case VK_FORMAT_D16_UNORM_S8_UINT: return GL_INTERNAL_D24_UNORM_S8_UINT;
		case VK_FORMAT_D24_UNORM_S8_UINT: return GL_INTERNAL_D24_UNORM_S8_UINT;
		case VK_FORMAT_D32_SFLOAT_S8_UINT: return GL_INTERNAL_D32_SFLOAT_S8_UINT;
		case VK_FORMAT_BC1_RGB_UNORM_BLOCK: return GL_INTERNAL_BC1_RGB_UNORM_BLOCK;
		case VK_FORMAT_BC1_RGB_SRGB_BLOCK: return GL_INTERNAL_BC1_RGB_SRGB_BLOCK;
		case VK_FORMAT_BC1_RGBA_UNORM_BLOCK: return GL_INTERNAL_BC1_RGBA_UNORM_BLOCK;
		case VK_FORMAT_BC1_RGBA_SRGB_BLOCK: return GL_INTERNAL_BC1_RGBA_SRGB_BLOCK;
		case VK_FORMAT_BC2_UNORM_BLOCK: return GL_INTERNAL_BC2_UNORM_BLOCK;
		case VK_FORMAT_BC2_SRGB_BLOCK: return GL_INTERNAL_BC2_SRGB_BLOCK;
		case VK_FORMAT_BC3_UNORM_BLOCK: return GL_INTERNAL_BC3_UNORM_BLOCK;
		case VK_FORMAT_BC3_SRGB_BLOCK: return GL_INTERNAL_BC3_SRGB_BLOCK;
		case VK_FORMAT_BC4_UNORM_BLOCK: return GL_INTERNAL_BC4_UNORM_BLOCK;
		case VK_FORMAT_BC4_SNORM_BLOCK: return GL_INTERNAL_BC4_SNORM_BLOCK;
		case VK_FORMAT_BC5_UNORM_BLOCK: return GL_INTERNAL_BC5_UNORM_BLOCK;
		case VK_FORMAT_BC5_SNORM_BLOCK: return GL_INTERNAL_BC5_SNORM_BLOCK;
		case VK_FORMAT_BC6H_UFLOAT_BLOCK: return GL_INTERNAL_BC6H_UFLOAT_BLOCK;
		case VK_FORMAT_BC6H_SFLOAT_BLOCK: return GL_INTERNAL_BC6H_SFLOAT_BLOCK;
		case VK_FORMAT_BC7_UNORM_BLOCK: return GL_INTERNAL_BC7_UNORM_BLOCK;
		case VK_FORMAT_BC7_SRGB_BLOCK: return GL_INTERNAL_BC7_SRGB_BLOCK;
		//case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: return GL_INTERNAL_ETC2_R8G8B8_UNORM_BLOCK;
		//case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: return GL_INTERNAL_ETC2_R8G8B8_SRGB_BLOCK;
		//case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: return GL_INTERNAL_ETC2_R8G8B8A1_UNORM_BLOCK;
		//case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: return GL_INTERNAL_ETC2_R8G8B8A1_SRGB_BLOCK;
		//case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: return GL_INTERNAL_ETC2_R8G8B8A8_UNORM_BLOCK;
		//case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: return GL_INTERNAL_ETC2_R8G8B8A8_SRGB_BLOCK;
		//case VK_FORMAT_EAC_R11_UNORM_BLOCK: return GL_INTERNAL_EAC_R11_UNORM_BLOCK;
		//case VK_FORMAT_EAC_R11_SNORM_BLOCK: return GL_INTERNAL_EAC_R11_SNORM_BLOCK;
		//case VK_FORMAT_EAC_R11G11_UNORM_BLOCK: return GL_INTERNAL_EAC_R11G11_UNORM_BLOCK;
		//case VK_FORMAT_EAC_R11G11_SNORM_BLOCK: return GL_INTERNAL_EAC_R11G11_SNORM_BLOCK;
		case VK_FORMAT_ASTC_4x4_UNORM_BLOCK: return GL_INTERNAL_ASTC_4x4_UNORM_BLOCK;
		case VK_FORMAT_ASTC_4x4_SRGB_BLOCK: return GL_INTERNAL_ASTC_4x4_SRGB_BLOCK;
		case VK_FORMAT_ASTC_5x4_UNORM_BLOCK: return GL_INTERNAL_ASTC_5x4_UNORM_BLOCK;
		case VK_FORMAT_ASTC_5x4_SRGB_BLOCK: return GL_INTERNAL_ASTC_5x4_SRGB_BLOCK;
		case VK_FORMAT_ASTC_5x5_UNORM_BLOCK: return GL_INTERNAL_ASTC_5x5_UNORM_BLOCK;
		case VK_FORMAT_ASTC_5x5_SRGB_BLOCK: return GL_INTERNAL_ASTC_5x5_SRGB_BLOCK;
		case VK_FORMAT_ASTC_6x5_UNORM_BLOCK: return GL_INTERNAL_ASTC_6x5_UNORM_BLOCK;
		case VK_FORMAT_ASTC_6x5_SRGB_BLOCK: return GL_INTERNAL_ASTC_6x5_SRGB_BLOCK;
		case VK_FORMAT_ASTC_6x6_UNORM_BLOCK: return GL_INTERNAL_ASTC_6x6_UNORM_BLOCK;
		case VK_FORMAT_ASTC_6x6_SRGB_BLOCK: return GL_INTERNAL_ASTC_6x6_SRGB_BLOCK;
		case VK_FORMAT_ASTC_8x5_UNORM_BLOCK: return GL_INTERNAL_ASTC_8x5_UNORM_BLOCK;
		case VK_FORMAT_ASTC_8x5_SRGB_BLOCK: return GL_INTERNAL_ASTC_8x5_SRGB_BLOCK;
		case VK_FORMAT_ASTC_8x6_UNORM_BLOCK: return GL_INTERNAL_ASTC_8x6_UNORM_BLOCK;
		case VK_FORMAT_ASTC_8x6_SRGB_BLOCK: return GL_INTERNAL_ASTC_8x6_SRGB_BLOCK;
		case VK_FORMAT_ASTC_8x8_UNORM_BLOCK: return GL_INTERNAL_ASTC_8x8_UNORM_BLOCK;
		case VK_FORMAT_ASTC_8x8_SRGB_BLOCK: return GL_INTERNAL_ASTC_8x8_SRGB_BLOCK;
		case VK_FORMAT_ASTC_10x5_UNORM_BLOCK: return GL_INTERNAL_ASTC_10x5_UNORM_BLOCK;
		case VK_FORMAT_ASTC_10x5_SRGB_BLOCK: return GL_INTERNAL_ASTC_10x5_SRGB_BLOCK;
		case VK_FORMAT_ASTC_10x6_UNORM_BLOCK: return GL_INTERNAL_ASTC_10x6_UNORM_BLOCK;
		case VK_FORMAT_ASTC_10x6_SRGB_BLOCK: return GL_INTERNAL_ASTC_10x6_SRGB_BLOCK;
		case VK_FORMAT_ASTC_10x8_UNORM_BLOCK: return GL_INTERNAL_ASTC_10x8_UNORM_BLOCK;
		case VK_FORMAT_ASTC_10x8_SRGB_BLOCK: return GL_INTERNAL_ASTC_10x8_SRGB_BLOCK;
		case VK_FORMAT_ASTC_10x10_UNORM_BLOCK: return GL_INTERNAL_ASTC_10x10_UNORM_BLOCK;
		case VK_FORMAT_ASTC_10x10_SRGB_BLOCK: return GL_INTERNAL_ASTC_10x10_SRGB_BLOCK;
		case VK_FORMAT_ASTC_12x10_UNORM_BLOCK: return GL_INTERNAL_ASTC_12x10_UNORM_BLOCK;
		case VK_FORMAT_ASTC_12x10_SRGB_BLOCK: return GL_INTERNAL_ASTC_12x10_SRGB_BLOCK;
		case VK_FORMAT_ASTC_12x12_UNORM_BLOCK: return GL_INTERNAL_ASTC_12x12_UNORM_BLOCK;
		case VK_FORMAT_ASTC_12x12_SRGB_BLOCK: return GL_INTERNAL_ASTC_12x12_SRGB_BLOCK;

		default:
			return GL_INTERNAL_UNSUPPORTED;
		}
	}

	GlFormat getFormat( VkFormat format )noexcept
	{
		switch ( format )
		{
		case VK_FORMAT_R8_UNORM:
		case VK_FORMAT_R8_SNORM:
		case VK_FORMAT_R8_SRGB:
		case VK_FORMAT_R16_UNORM:
		case VK_FORMAT_R16_SNORM:
		case VK_FORMAT_R16_SFLOAT:
		case VK_FORMAT_R32_SFLOAT:
		case VK_FORMAT_BC4_UNORM_BLOCK:
		case VK_FORMAT_BC4_SNORM_BLOCK:
		case VK_FORMAT_EAC_R11_UNORM_BLOCK:
		case VK_FORMAT_EAC_R11_SNORM_BLOCK:
			return GL_FORMAT_R;

		case VK_FORMAT_R8_USCALED:
		case VK_FORMAT_R8_SSCALED:
		case VK_FORMAT_R8_UINT:
		case VK_FORMAT_R8_SINT:
		case VK_FORMAT_R16_USCALED:
		case VK_FORMAT_R16_SSCALED:
		case VK_FORMAT_R16_UINT:
		case VK_FORMAT_R16_SINT:
		case VK_FORMAT_R32_UINT:
		case VK_FORMAT_R32_SINT:
			return GL_FORMAT_R_INTEGER;

		case VK_FORMAT_R4G4_UNORM_PACK8:
		case VK_FORMAT_R8G8_UNORM:
		case VK_FORMAT_R8G8_SNORM:
		case VK_FORMAT_R8G8_SRGB:
		case VK_FORMAT_R16G16_UNORM:
		case VK_FORMAT_R16G16_SNORM:
		case VK_FORMAT_R16G16_SFLOAT:
		case VK_FORMAT_R32G32_SFLOAT:
		case VK_FORMAT_BC5_UNORM_BLOCK:
		case VK_FORMAT_BC5_SNORM_BLOCK:
		case VK_FORMAT_EAC_R11G11_UNORM_BLOCK:
		case VK_FORMAT_EAC_R11G11_SNORM_BLOCK:
			return GL_FORMAT_RG;

		case VK_FORMAT_R8G8_USCALED:
		case VK_FORMAT_R8G8_SSCALED:
		case VK_FORMAT_R8G8_UINT:
		case VK_FORMAT_R8G8_SINT:
		case VK_FORMAT_R16G16_USCALED:
		case VK_FORMAT_R16G16_SSCALED:
		case VK_FORMAT_R16G16_UINT:
		case VK_FORMAT_R16G16_SINT:
		case VK_FORMAT_R32G32_UINT:
		case VK_FORMAT_R32G32_SINT:
			return GL_FORMAT_RG_INTEGER;

		case VK_FORMAT_R8G8B8_UNORM:
		case VK_FORMAT_R8G8B8_SNORM:
		case VK_FORMAT_R8G8B8_SRGB:
		case VK_FORMAT_R5G6B5_UNORM_PACK16:
		case VK_FORMAT_R16G16B16_UNORM:
		case VK_FORMAT_R16G16B16_SNORM:
		case VK_FORMAT_R16G16B16_SFLOAT:
		case VK_FORMAT_R32G32B32_SFLOAT:
		case VK_FORMAT_BC1_RGB_UNORM_BLOCK:
		case VK_FORMAT_BC1_RGB_SRGB_BLOCK:
		case VK_FORMAT_BC6H_SFLOAT_BLOCK:
		case VK_FORMAT_BC6H_UFLOAT_BLOCK:
		case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
		case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
			return GL_FORMAT_RGB;

		case VK_FORMAT_R8G8B8_USCALED:
		case VK_FORMAT_R8G8B8_SSCALED:
		case VK_FORMAT_R8G8B8_UINT:
		case VK_FORMAT_R8G8B8_SINT:
		case VK_FORMAT_R16G16B16_USCALED:
		case VK_FORMAT_R16G16B16_SSCALED:
		case VK_FORMAT_R16G16B16_UINT:
		case VK_FORMAT_R16G16B16_SINT:
		case VK_FORMAT_R32G32B32_UINT:
		case VK_FORMAT_R32G32B32_SINT:
			return GL_FORMAT_RGB_INTEGER;

		case VK_FORMAT_B8G8R8_UNORM:
		case VK_FORMAT_B8G8R8_SNORM:
		case VK_FORMAT_B8G8R8_SRGB:
		case VK_FORMAT_B5G6R5_UNORM_PACK16:
			return GL_FORMAT_BGR;

		case VK_FORMAT_B8G8R8_USCALED:
		case VK_FORMAT_B8G8R8_SSCALED:
		case VK_FORMAT_B8G8R8_UINT:
		case VK_FORMAT_B8G8R8_SINT:
			return GL_FORMAT_BGR_INTEGER;

		case VK_FORMAT_R4G4B4A4_UNORM_PACK16:
		case VK_FORMAT_A2R10G10B10_UNORM_PACK32:
		case VK_FORMAT_R8G8B8A8_UNORM:
		case VK_FORMAT_R8G8B8A8_SNORM:
		case VK_FORMAT_R8G8B8A8_SRGB:
		case VK_FORMAT_R5G5B5A1_UNORM_PACK16:
		case VK_FORMAT_A1R5G5B5_UNORM_PACK16:
		case VK_FORMAT_R16G16B16A16_UNORM:
		case VK_FORMAT_R16G16B16A16_SNORM:
		case VK_FORMAT_R16G16B16A16_SFLOAT:
		case VK_FORMAT_R32G32B32A32_SFLOAT:
		case VK_FORMAT_BC1_RGBA_UNORM_BLOCK:
		case VK_FORMAT_BC1_RGBA_SRGB_BLOCK:
		case VK_FORMAT_BC2_UNORM_BLOCK:
		case VK_FORMAT_BC2_SRGB_BLOCK:
		case VK_FORMAT_BC3_UNORM_BLOCK:
		case VK_FORMAT_BC3_SRGB_BLOCK:
		case VK_FORMAT_BC7_UNORM_BLOCK:
		case VK_FORMAT_BC7_SRGB_BLOCK:
		case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
		case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
		case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
		case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
		case VK_FORMAT_ASTC_4x4_UNORM_BLOCK:
		case VK_FORMAT_ASTC_4x4_SRGB_BLOCK:
		case VK_FORMAT_ASTC_5x4_UNORM_BLOCK:
		case VK_FORMAT_ASTC_5x4_SRGB_BLOCK:
		case VK_FORMAT_ASTC_5x5_UNORM_BLOCK:
		case VK_FORMAT_ASTC_5x5_SRGB_BLOCK:
		case VK_FORMAT_ASTC_6x5_UNORM_BLOCK:
		case VK_FORMAT_ASTC_6x5_SRGB_BLOCK:
		case VK_FORMAT_ASTC_6x6_UNORM_BLOCK:
		case VK_FORMAT_ASTC_6x6_SRGB_BLOCK:
		case VK_FORMAT_ASTC_8x5_UNORM_BLOCK:
		case VK_FORMAT_ASTC_8x5_SRGB_BLOCK:
		case VK_FORMAT_ASTC_8x6_UNORM_BLOCK:
		case VK_FORMAT_ASTC_8x6_SRGB_BLOCK:
		case VK_FORMAT_ASTC_8x8_UNORM_BLOCK:
		case VK_FORMAT_ASTC_8x8_SRGB_BLOCK:
		case VK_FORMAT_ASTC_10x5_UNORM_BLOCK:
		case VK_FORMAT_ASTC_10x5_SRGB_BLOCK:
		case VK_FORMAT_ASTC_10x6_UNORM_BLOCK:
		case VK_FORMAT_ASTC_10x6_SRGB_BLOCK:
		case VK_FORMAT_ASTC_10x8_UNORM_BLOCK:
		case VK_FORMAT_ASTC_10x8_SRGB_BLOCK:
		case VK_FORMAT_ASTC_10x10_UNORM_BLOCK:
		case VK_FORMAT_ASTC_10x10_SRGB_BLOCK:
		case VK_FORMAT_ASTC_12x10_UNORM_BLOCK:
		case VK_FORMAT_ASTC_12x10_SRGB_BLOCK:
		case VK_FORMAT_ASTC_12x12_UNORM_BLOCK:
		case VK_FORMAT_ASTC_12x12_SRGB_BLOCK:
			return GL_FORMAT_RGBA;

		case VK_FORMAT_A2R10G10B10_UINT_PACK32:
		case VK_FORMAT_A2B10G10R10_UINT_PACK32:
		case VK_FORMAT_R8G8B8A8_USCALED:
		case VK_FORMAT_R8G8B8A8_SSCALED:
		case VK_FORMAT_R8G8B8A8_UINT:
		case VK_FORMAT_R8G8B8A8_SINT:
		case VK_FORMAT_A8B8G8R8_USCALED_PACK32:
		case VK_FORMAT_A8B8G8R8_SSCALED_PACK32:
		case VK_FORMAT_A8B8G8R8_UINT_PACK32:
		case VK_FORMAT_A8B8G8R8_SINT_PACK32:
		case VK_FORMAT_R16G16B16A16_USCALED:
		case VK_FORMAT_R16G16B16A16_SSCALED:
		case VK_FORMAT_R16G16B16A16_UINT:
		case VK_FORMAT_R16G16B16A16_SINT:
		case VK_FORMAT_R32G32B32A32_UINT:
		case VK_FORMAT_R32G32B32A32_SINT:
			return GL_FORMAT_RGBA_INTEGER;

		case VK_FORMAT_B4G4R4A4_UNORM_PACK16:
		case VK_FORMAT_B8G8R8A8_UNORM:
		case VK_FORMAT_B8G8R8A8_SNORM:
		case VK_FORMAT_B8G8R8A8_SRGB:
		case VK_FORMAT_B5G5R5A1_UNORM_PACK16:
			return GL_FORMAT_BGRA;

		case VK_FORMAT_B8G8R8A8_USCALED:
		case VK_FORMAT_B8G8R8A8_SSCALED:
		case VK_FORMAT_B8G8R8A8_UINT:
		case VK_FORMAT_B8G8R8A8_SINT:
			return GL_FORMAT_BGRA_INTEGER;

		case VK_FORMAT_A2B10G10R10_UNORM_PACK32:
		case VK_FORMAT_A8B8G8R8_UNORM_PACK32:
		case VK_FORMAT_A8B8G8R8_SNORM_PACK32:
		case VK_FORMAT_A8B8G8R8_SRGB_PACK32:
			return GL_FORMAT_ABGR;

		case VK_FORMAT_B10G11R11_UFLOAT_PACK32:
			return GL_FORMAT_BGR;

		case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:
			return GL_FORMAT_ABGR;

		case VK_FORMAT_D16_UNORM:
		case VK_FORMAT_D32_SFLOAT:
			return GL_FORMAT_D;

		case VK_FORMAT_D24_UNORM_S8_UINT:
		case VK_FORMAT_D32_SFLOAT_S8_UINT:
			return GL_FORMAT_DS;

		case VK_FORMAT_S8_UINT:
			return GL_FORMAT_S;

		default:
			assert( false && "Unsupported pixel format." );
			return GL_FORMAT_RGBA;
		}
	}

	GlType getType( VkFormat format )noexcept
	{
		switch ( format )
		{
		case VK_FORMAT_R4G4B4A4_UNORM_PACK16:
		case VK_FORMAT_B4G4R4A4_UNORM_PACK16:
			return GL_TYPE_US_4_4_4_4;

		case VK_FORMAT_R5G6B5_UNORM_PACK16:
		case VK_FORMAT_B5G6R5_UNORM_PACK16:
			return GL_TYPE_US_5_6_5;

		case VK_FORMAT_R5G5B5A1_UNORM_PACK16:
		case VK_FORMAT_B5G5R5A1_UNORM_PACK16:
		case VK_FORMAT_A1R5G5B5_UNORM_PACK16:
			return GL_TYPE_US_5_5_5_1;

		case VK_FORMAT_R8_SNORM:
		case VK_FORMAT_R8G8_SNORM:
		case VK_FORMAT_R8G8B8_SNORM:
		case VK_FORMAT_B8G8R8_SNORM:
		case VK_FORMAT_R8G8B8A8_SNORM:
		case VK_FORMAT_B8G8R8A8_SNORM:
		case VK_FORMAT_A8B8G8R8_SNORM_PACK32:
		case VK_FORMAT_R8_SSCALED:
		case VK_FORMAT_R8G8_SSCALED:
		case VK_FORMAT_R8G8B8_SSCALED:
		case VK_FORMAT_B8G8R8_SSCALED:
		case VK_FORMAT_R8G8B8A8_SSCALED:
		case VK_FORMAT_B8G8R8A8_SSCALED:
		case VK_FORMAT_A8B8G8R8_SSCALED_PACK32:
		case VK_FORMAT_R8_SINT:
		case VK_FORMAT_R8G8_SINT:
		case VK_FORMAT_R8G8B8_SINT:
		case VK_FORMAT_B8G8R8_SINT:
		case VK_FORMAT_R8G8B8A8_SINT:
		case VK_FORMAT_B8G8R8A8_SINT:
		case VK_FORMAT_A8B8G8R8_SINT_PACK32:
			return GL_TYPE_I8;

		case VK_FORMAT_R4G4_UNORM_PACK8:
		case VK_FORMAT_R8_UNORM:
		case VK_FORMAT_R8G8_UNORM:
		case VK_FORMAT_R8G8B8_UNORM:
		case VK_FORMAT_B8G8R8_UNORM:
		case VK_FORMAT_R8G8B8A8_UNORM:
		case VK_FORMAT_B8G8R8A8_UNORM:
		case VK_FORMAT_A8B8G8R8_UNORM_PACK32:
		case VK_FORMAT_R8_USCALED:
		case VK_FORMAT_R8G8_USCALED:
		case VK_FORMAT_R8G8B8_USCALED:
		case VK_FORMAT_B8G8R8_USCALED:
		case VK_FORMAT_R8G8B8A8_USCALED:
		case VK_FORMAT_B8G8R8A8_USCALED:
		case VK_FORMAT_A8B8G8R8_USCALED_PACK32:
		case VK_FORMAT_R8_UINT:
		case VK_FORMAT_R8G8_UINT:
		case VK_FORMAT_R8G8B8_UINT:
		case VK_FORMAT_B8G8R8_UINT:
		case VK_FORMAT_R8G8B8A8_UINT:
		case VK_FORMAT_B8G8R8A8_UINT:
		case VK_FORMAT_A8B8G8R8_UINT_PACK32:
		case VK_FORMAT_R8_SRGB:
		case VK_FORMAT_R8G8_SRGB:
		case VK_FORMAT_R8G8B8_SRGB:
		case VK_FORMAT_B8G8R8_SRGB:
		case VK_FORMAT_R8G8B8A8_SRGB:
		case VK_FORMAT_B8G8R8A8_SRGB:
		case VK_FORMAT_A8B8G8R8_SRGB_PACK32:
			return GL_TYPE_UI8;

		case VK_FORMAT_A2R10G10B10_UNORM_PACK32:
		case VK_FORMAT_A2R10G10B10_USCALED_PACK32:
		case VK_FORMAT_A2R10G10B10_UINT_PACK32:
		case VK_FORMAT_A2B10G10R10_UNORM_PACK32:
		case VK_FORMAT_A2B10G10R10_USCALED_PACK32:
		case VK_FORMAT_A2B10G10R10_UINT_PACK32:
			return GL_TYPE_UI_2_10_10_10_REV;

		case VK_FORMAT_R16_SNORM:
		case VK_FORMAT_R16G16_SNORM:
		case VK_FORMAT_R16G16B16_SNORM:
		case VK_FORMAT_R16G16B16A16_SNORM:
		case VK_FORMAT_R16_SINT:
		case VK_FORMAT_R16G16_SINT:
		case VK_FORMAT_R16G16B16_SINT:
		case VK_FORMAT_R16G16B16A16_SINT:
		case VK_FORMAT_R16_SSCALED:
		case VK_FORMAT_R16G16_SSCALED:
		case VK_FORMAT_R16G16B16_SSCALED:
		case VK_FORMAT_R16G16B16A16_SSCALED:
			return GL_TYPE_I16;

		case VK_FORMAT_R16_UNORM:
		case VK_FORMAT_R16G16_UNORM:
		case VK_FORMAT_R16G16B16_UNORM:
		case VK_FORMAT_R16G16B16A16_UNORM:
		case VK_FORMAT_R16_UINT:
		case VK_FORMAT_R16G16_UINT:
		case VK_FORMAT_R16G16B16_UINT:
		case VK_FORMAT_R16G16B16A16_UINT:
		case VK_FORMAT_R16_USCALED:
		case VK_FORMAT_R16G16_USCALED:
		case VK_FORMAT_R16G16B16_USCALED:
		case VK_FORMAT_R16G16B16A16_USCALED:
			return GL_TYPE_UI16;

		case VK_FORMAT_R16_SFLOAT:
		case VK_FORMAT_R16G16_SFLOAT:
		case VK_FORMAT_R16G16B16_SFLOAT:
		case VK_FORMAT_R16G16B16A16_SFLOAT:
			return GL_TYPE_F16;

		case VK_FORMAT_R32_SINT:
		case VK_FORMAT_R32G32_SINT:
		case VK_FORMAT_R32G32B32_SINT:
		case VK_FORMAT_R32G32B32A32_SINT:
			return GL_TYPE_I32;

		case VK_FORMAT_R32_UINT:
		case VK_FORMAT_R32G32_UINT:
		case VK_FORMAT_R32G32B32_UINT:
		case VK_FORMAT_R32G32B32A32_UINT:
			return GL_TYPE_UI32;

		case VK_FORMAT_R32_SFLOAT:
		case VK_FORMAT_R32G32_SFLOAT:
		case VK_FORMAT_R32G32B32_SFLOAT:
		case VK_FORMAT_R32G32B32A32_SFLOAT:
		case VK_FORMAT_BC6H_SFLOAT_BLOCK:
		case VK_FORMAT_BC6H_UFLOAT_BLOCK:
			return GL_TYPE_F32;

		case VK_FORMAT_B10G11R11_UFLOAT_PACK32:
			return GL_UI_10F_11F_11F_REV;

		case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:
			return GL_UI_5_9_9_9_REV;

		case VK_FORMAT_D16_UNORM:
			return GL_TYPE_UI16;

		case VK_FORMAT_D32_SFLOAT:
			return GL_TYPE_F32;

		case VK_FORMAT_S8_UINT:
			return GL_TYPE_UI8;

		case VK_FORMAT_D24_UNORM_S8_UINT:
			return GL_TYPE_UI_24_8;

		case VK_FORMAT_D32_SFLOAT_S8_UINT:
			return GL_TYPE_32F_UI24_8;

		case VK_FORMAT_BC1_RGB_UNORM_BLOCK:
		case VK_FORMAT_BC1_RGB_SRGB_BLOCK:
		case VK_FORMAT_BC1_RGBA_UNORM_BLOCK:
		case VK_FORMAT_BC1_RGBA_SRGB_BLOCK:
		case VK_FORMAT_BC2_UNORM_BLOCK:
		case VK_FORMAT_BC2_SRGB_BLOCK:
		case VK_FORMAT_BC3_UNORM_BLOCK:
		case VK_FORMAT_BC3_SRGB_BLOCK:
		case VK_FORMAT_BC4_UNORM_BLOCK:
		case VK_FORMAT_BC4_SNORM_BLOCK:
		case VK_FORMAT_BC5_UNORM_BLOCK:
		case VK_FORMAT_BC5_SNORM_BLOCK:
		case VK_FORMAT_BC7_UNORM_BLOCK:
		case VK_FORMAT_BC7_SRGB_BLOCK:
		case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
		case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
		case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
		case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
		case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
		case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
		case VK_FORMAT_EAC_R11_UNORM_BLOCK:
		case VK_FORMAT_EAC_R11_SNORM_BLOCK:
		case VK_FORMAT_EAC_R11G11_UNORM_BLOCK:
		case VK_FORMAT_EAC_R11G11_SNORM_BLOCK:
		case VK_FORMAT_ASTC_4x4_UNORM_BLOCK:
		case VK_FORMAT_ASTC_4x4_SRGB_BLOCK:
		case VK_FORMAT_ASTC_5x4_UNORM_BLOCK:
		case VK_FORMAT_ASTC_5x4_SRGB_BLOCK:
		case VK_FORMAT_ASTC_5x5_UNORM_BLOCK:
		case VK_FORMAT_ASTC_5x5_SRGB_BLOCK:
		case VK_FORMAT_ASTC_6x5_UNORM_BLOCK:
		case VK_FORMAT_ASTC_6x5_SRGB_BLOCK:
		case VK_FORMAT_ASTC_6x6_UNORM_BLOCK:
		case VK_FORMAT_ASTC_6x6_SRGB_BLOCK:
		case VK_FORMAT_ASTC_8x5_UNORM_BLOCK:
		case VK_FORMAT_ASTC_8x5_SRGB_BLOCK:
		case VK_FORMAT_ASTC_8x6_UNORM_BLOCK:
		case VK_FORMAT_ASTC_8x6_SRGB_BLOCK:
		case VK_FORMAT_ASTC_8x8_UNORM_BLOCK:
		case VK_FORMAT_ASTC_8x8_SRGB_BLOCK:
		case VK_FORMAT_ASTC_10x5_UNORM_BLOCK:
		case VK_FORMAT_ASTC_10x5_SRGB_BLOCK:
		case VK_FORMAT_ASTC_10x6_UNORM_BLOCK:
		case VK_FORMAT_ASTC_10x6_SRGB_BLOCK:
		case VK_FORMAT_ASTC_10x8_UNORM_BLOCK:
		case VK_FORMAT_ASTC_10x8_SRGB_BLOCK:
		case VK_FORMAT_ASTC_10x10_UNORM_BLOCK:
		case VK_FORMAT_ASTC_10x10_SRGB_BLOCK:
		case VK_FORMAT_ASTC_12x10_UNORM_BLOCK:
		case VK_FORMAT_ASTC_12x10_SRGB_BLOCK:
		case VK_FORMAT_ASTC_12x12_UNORM_BLOCK:
		case VK_FORMAT_ASTC_12x12_SRGB_BLOCK:
			return GL_TYPE_UI8;

		default:
			assert( false && "Unsupported pixel format." );
			return GL_TYPE_UI_8_8_8_8;
		}
	}

	GlComponentMapping getSwizzle( VkFormat format )
	{
		switch ( format )
		{
		case VK_FORMAT_A1R5G5B5_UNORM_PACK16: return { GL_COMPONENT_SWIZZLE_ALPHA, GL_COMPONENT_SWIZZLE_RED, GL_COMPONENT_SWIZZLE_GREEN, GL_COMPONENT_SWIZZLE_BLUE };

		default:
			return getIdentitySwizzle();
		}
	}

	void udpateSwizzle( VkComponentSwizzle swizzle
		, GlComponentMapping source
		, GlComponentSwizzle & result )
	{
		switch ( swizzle )
		{
		case VK_COMPONENT_SWIZZLE_R:
			result = source.r;
			break;
		case VK_COMPONENT_SWIZZLE_G:
			result = source.g;
			break;
		case VK_COMPONENT_SWIZZLE_B:
			result = source.b;
			break;
		case VK_COMPONENT_SWIZZLE_A:
			result = source.a;
			break;
		case VK_COMPONENT_SWIZZLE_ONE:
			result = GL_COMPONENT_SWIZZLE_ONE;
			break;
		case VK_COMPONENT_SWIZZLE_ZERO:
			result = GL_COMPONENT_SWIZZLE_ZERO;
			break;
		}
	}

	GlComponentMapping getSwizzle( VkFormat format, VkComponentMapping const & components )
	{
		GlComponentMapping source = getSwizzle( format );
		GlComponentMapping result = source;
		udpateSwizzle( components.r, source, result.r );
		udpateSwizzle( components.g, source, result.g );
		udpateSwizzle( components.b, source, result.b );
		udpateSwizzle( components.a, source, result.a );
		return result;
	}

	bool isCompatible8( GlInternal value )
	{
		return value == GL_INTERNAL_R8_UNORM
			|| value == GL_INTERNAL_R8_SNORM
			|| value == GL_INTERNAL_R8_UINT
			|| value == GL_INTERNAL_R8_SINT;
	}

	bool isCompatible16( GlInternal value )
	{
		return value == GL_INTERNAL_R16_SFLOAT
			|| value == GL_INTERNAL_R16_SINT
			|| value == GL_INTERNAL_R16_UINT
			|| value == GL_INTERNAL_R16_SNORM
			|| value == GL_INTERNAL_R16_UNORM
			|| value == GL_INTERNAL_R8G8_UNORM
			|| value == GL_INTERNAL_R8G8_SNORM
			|| value == GL_INTERNAL_R8G8_UINT
			|| value == GL_INTERNAL_R8G8_SINT;
	}

	bool isCompatible24( GlInternal value )
	{
		return value == GL_INTERNAL_R8G8B8_UNORM
			|| value == GL_INTERNAL_R8G8B8_SNORM
			|| value == GL_INTERNAL_R8G8B8_UINT
			|| value == GL_INTERNAL_R8G8B8_SINT
			|| value == GL_INTERNAL_R8G8B8_SRGB;
	}

	bool isCompatible32( GlInternal value )
	{
		return value == GL_INTERNAL_R8G8B8A8_UNORM
			|| value == GL_INTERNAL_R8G8B8A8_SNORM
			|| value == GL_INTERNAL_R8G8B8A8_UINT
			|| value == GL_INTERNAL_R8G8B8A8_SINT
			|| value == GL_INTERNAL_R8G8B8A8_SRGB
			|| value == GL_INTERNAL_R16G16_SFLOAT
			|| value == GL_INTERNAL_R16G16_SINT
			|| value == GL_INTERNAL_R16G16_UINT
			|| value == GL_INTERNAL_R16G16_SNORM
			|| value == GL_INTERNAL_R16G16_UNORM
			|| value == GL_INTERNAL_R32_SFLOAT
			|| value == GL_INTERNAL_R32_SINT
			|| value == GL_INTERNAL_R32_UINT
			|| value == GL_INTERNAL_B10G11R11_UFLOAT_PACK32
			|| value == GL_INTERNAL_R10G10B10A2_UNORM_PACK32
			|| value == GL_INTERNAL_R10G10B10A2_UINT_PACK32
			|| value == GL_INTERNAL_E5B9G9R9_UFLOAT_PACK32;
	}

	bool isCompatible48( GlInternal value )
	{
		return value == GL_INTERNAL_R16G16B16_SFLOAT
			|| value == GL_INTERNAL_R16G16B16_SINT
			|| value == GL_INTERNAL_R16G16B16_UINT
			|| value == GL_INTERNAL_R16G16B16_SNORM
			|| value == GL_INTERNAL_R16G16B16_UNORM;
	}

	bool isCompatible64( GlInternal value )
	{
		return value == GL_INTERNAL_R16G16B16A16_SFLOAT
			|| value == GL_INTERNAL_R16G16B16A16_SINT
			|| value == GL_INTERNAL_R16G16B16A16_UINT
			|| value == GL_INTERNAL_R16G16B16A16_SNORM
			|| value == GL_INTERNAL_R16G16B16A16_UNORM
			|| value == GL_INTERNAL_R32G32_SFLOAT
			|| value == GL_INTERNAL_R32G32_SINT
			|| value == GL_INTERNAL_R32G32_UINT
			|| value == GL_INTERNAL_BC4_UNORM_BLOCK
			|| value == GL_INTERNAL_BC4_SNORM_BLOCK;
	}

	bool isCompatible96( GlInternal value )
	{
		return value == GL_INTERNAL_R32G32B32_SFLOAT
			|| value == GL_INTERNAL_R32G32B32_SINT
			|| value == GL_INTERNAL_R32G32B32_UINT;
	}

	bool isCompatible128( GlInternal value )
	{
		return value == GL_INTERNAL_R32G32B32A32_SFLOAT
			|| value == GL_INTERNAL_R32G32B32A32_SINT
			|| value == GL_INTERNAL_R32G32B32A32_UINT
			|| value == GL_INTERNAL_BC5_UNORM_BLOCK
			|| value == GL_INTERNAL_BC5_SNORM_BLOCK
			|| value == GL_INTERNAL_BC6H_UFLOAT_BLOCK
			|| value == GL_INTERNAL_BC6H_SFLOAT_BLOCK
			|| value == GL_INTERNAL_BC7_UNORM_BLOCK
			|| value == GL_INTERNAL_BC7_SRGB_BLOCK;
	}

	bool areCopyCompatible( VkFormat lhs, VkFormat rhs )
	{
		if ( lhs == rhs
			|| getInternalFormat( lhs ) == getInternalFormat( rhs ) )
		{
			return true;
		}

		auto size = getMinimalSize( lhs );
		auto result = size == getMinimalSize( rhs );

		if ( result )
		{
			auto lhsInternal = getInternalFormat( lhs );
			auto rhsInternal = getInternalFormat( rhs );

			if ( size == 1u )
			{
				result = isCompatible8( lhsInternal ) && isCompatible8( rhsInternal );
			}
			else if ( size == 2u )
			{
				result = isCompatible16( lhsInternal ) && isCompatible16( rhsInternal );
			}
			else if ( size == 3u )
			{
				result = isCompatible24( lhsInternal ) && isCompatible24( rhsInternal );
			}
			else if ( size == 4u )
			{
				result = isCompatible32( lhsInternal ) && isCompatible32( rhsInternal );
			}
			else if ( size == 6u )
			{
				result = isCompatible48( lhsInternal ) && isCompatible48( rhsInternal );
			}
			else if ( size == 8u )
			{
				result = isCompatible64( lhsInternal ) && isCompatible64( rhsInternal );
			}
			else if ( size == 12u )
			{
				result = isCompatible96( lhsInternal ) && isCompatible96( rhsInternal );
			}
			else if ( size == 16u )
			{
				result = isCompatible128( lhsInternal ) && isCompatible128( rhsInternal );
			}
			else
			{
				result = false;
			}
		}

		return result;
	}

	bool isSIntFormat( VkFormat format )
	{
		switch ( format )
		{
		case VK_FORMAT_R8_SSCALED:
		case VK_FORMAT_R8_SINT:
		case VK_FORMAT_R8G8_SSCALED:
		case VK_FORMAT_R8G8_SINT:
		case VK_FORMAT_R8G8B8_SSCALED:
		case VK_FORMAT_R8G8B8_SINT:
		case VK_FORMAT_B8G8R8_SSCALED:
		case VK_FORMAT_B8G8R8_SINT:
		case VK_FORMAT_R8G8B8A8_SSCALED:
		case VK_FORMAT_R8G8B8A8_SINT:
		case VK_FORMAT_B8G8R8A8_SSCALED:
		case VK_FORMAT_B8G8R8A8_SINT:
		case VK_FORMAT_A8B8G8R8_SSCALED_PACK32:
		case VK_FORMAT_A8B8G8R8_SINT_PACK32:
		case VK_FORMAT_A2R10G10B10_SSCALED_PACK32:
		case VK_FORMAT_A2R10G10B10_SINT_PACK32:
		case VK_FORMAT_A2B10G10R10_SSCALED_PACK32:
		case VK_FORMAT_A2B10G10R10_SINT_PACK32:
		case VK_FORMAT_R16_SSCALED:
		case VK_FORMAT_R16_SINT:
		case VK_FORMAT_R16G16_SSCALED:
		case VK_FORMAT_R16G16_SINT:
		case VK_FORMAT_R16G16B16_SSCALED:
		case VK_FORMAT_R16G16B16_SINT:
		case VK_FORMAT_R16G16B16A16_SSCALED:
		case VK_FORMAT_R16G16B16A16_SINT:
		case VK_FORMAT_R32_SINT:
		case VK_FORMAT_R32G32_SINT:
		case VK_FORMAT_R32G32B32_SINT:
		case VK_FORMAT_R32G32B32A32_SINT:
		case VK_FORMAT_R64_SINT:
		case VK_FORMAT_R64G64_SINT:
		case VK_FORMAT_R64G64B64_SINT:
		case VK_FORMAT_R64G64B64A64_SINT:
			return true;

		default:
			return false;
		}
	}

	bool isUIntFormat( VkFormat format )
	{
		switch ( format )
		{
		case VK_FORMAT_R8_USCALED:
		case VK_FORMAT_R8_UINT:
		case VK_FORMAT_R8G8_USCALED:
		case VK_FORMAT_R8G8_UINT:
		case VK_FORMAT_R8G8B8_USCALED:
		case VK_FORMAT_R8G8B8_UINT:
		case VK_FORMAT_B8G8R8_USCALED:
		case VK_FORMAT_B8G8R8_UINT:
		case VK_FORMAT_R8G8B8A8_USCALED:
		case VK_FORMAT_R8G8B8A8_UINT:
		case VK_FORMAT_B8G8R8A8_USCALED:
		case VK_FORMAT_B8G8R8A8_UINT:
		case VK_FORMAT_A8B8G8R8_USCALED_PACK32:
		case VK_FORMAT_A8B8G8R8_UINT_PACK32:
		case VK_FORMAT_A2R10G10B10_USCALED_PACK32:
		case VK_FORMAT_A2R10G10B10_UINT_PACK32:
		case VK_FORMAT_A2B10G10R10_USCALED_PACK32:
		case VK_FORMAT_A2B10G10R10_UINT_PACK32:
		case VK_FORMAT_R16_USCALED:
		case VK_FORMAT_R16_UINT:
		case VK_FORMAT_R16G16_USCALED:
		case VK_FORMAT_R16G16_UINT:
		case VK_FORMAT_R16G16B16_USCALED:
		case VK_FORMAT_R16G16B16_UINT:
		case VK_FORMAT_R16G16B16A16_USCALED:
		case VK_FORMAT_R16G16B16A16_UINT:
		case VK_FORMAT_R32_UINT:
		case VK_FORMAT_R32G32_UINT:
		case VK_FORMAT_R32G32B32_UINT:
		case VK_FORMAT_R32G32B32A32_UINT:
		case VK_FORMAT_R64_UINT:
		case VK_FORMAT_R64G64_UINT:
		case VK_FORMAT_R64G64B64_UINT:
		case VK_FORMAT_R64G64B64A64_UINT:
			return true;

		default:
			return false;
		}
	}
}
