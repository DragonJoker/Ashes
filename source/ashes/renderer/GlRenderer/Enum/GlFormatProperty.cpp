#include "GlRendererPrerequisites.hpp"

namespace ashes::gl
{
	std::string getName( GlFormatProperty value )
	{
		switch ( value )
		{
		case GL_INTERNALFORMAT_SUPPORTED:
			return "GL_INTERNALFORMAT_SUPPORTED";
		case GL_INTERNALFORMAT_PREFERRED:
			return "GL_INTERNALFORMAT_PREFERRED";
		case GL_INTERNALFORMAT_RED_SIZE:
			return "GL_INTERNALFORMAT_RED_SIZE";
		case GL_INTERNALFORMAT_GREEN_SIZE:
			return "GL_INTERNALFORMAT_GREEN_SIZE";
		case GL_INTERNALFORMAT_BLUE_SIZE:
			return "GL_INTERNALFORMAT_BLUE_SIZE";
		case GL_INTERNALFORMAT_ALPHA_SIZE:
			return "GL_INTERNALFORMAT_ALPHA_SIZE";
		case GL_INTERNALFORMAT_DEPTH_SIZE:
			return "GL_INTERNALFORMAT_DEPTH_SIZE";
		case GL_INTERNALFORMAT_STENCIL_SIZE:
			return "GL_INTERNALFORMAT_STENCIL_SIZE";
		case GL_INTERNALFORMAT_SHARED_SIZE:
			return "GL_INTERNALFORMAT_SHARED_SIZE";
		case GL_INTERNALFORMAT_RED_TYPE:
			return "GL_INTERNALFORMAT_RED_TYPE";
		case GL_INTERNALFORMAT_GREEN_TYPE:
			return "GL_INTERNALFORMAT_GREEN_TYPE";
		case GL_INTERNALFORMAT_BLUE_TYPE:
			return "GL_INTERNALFORMAT_BLUE_TYPE";
		case GL_INTERNALFORMAT_ALPHA_TYPE:
			return "GL_INTERNALFORMAT_ALPHA_TYPE";
		case GL_INTERNALFORMAT_DEPTH_TYPE:
			return "GL_INTERNALFORMAT_DEPTH_TYPE";
		case GL_INTERNALFORMAT_STENCIL_TYPE:
			return "GL_INTERNALFORMAT_STENCIL_TYPE";
		case GL_FRAMEBUFFER_RENDERABLE:
			return "GL_FRAMEBUFFER_RENDERABLE";
		case GL_FRAMEBUFFER_RENDERABLE_LAYERED:
			return "GL_FRAMEBUFFER_RENDERABLE_LAYERED";
		case GL_FRAMEBUFFER_BLEND:
			return "GL_FRAMEBUFFER_BLEND";
		case GL_READ_PIXELS:
			return "GL_READ_PIXELS";
		case GL_READ_PIXELS_FORMAT:
			return "GL_READ_PIXELS_FORMAT";
		case GL_READ_PIXELS_TYPE:
			return "GL_READ_PIXELS_TYPE";
		case GL_FILTER:
			return "GL_FILTER";
		case GL_VERTEX_TEXTURE:
			return "GL_VERTEX_TEXTURE";
		case GL_TESS_CONTROL_TEXTURE:
			return "GL_TESS_CONTROL_TEXTURE";
		case GL_TESS_EVALUATION_TEXTURE:
			return "GL_TESS_EVALUATION_TEXTURE";
		case GL_GEOMETRY_TEXTURE:
			return "GL_GEOMETRY_TEXTURE";
		case GL_FRAGMENT_TEXTURE:
			return "GL_FRAGMENT_TEXTURE";
		case GL_COMPUTE_TEXTURE:
			return "GL_COMPUTE_TEXTURE";
		case GL_TEXTURE_SHADOW:
			return "GL_TEXTURE_SHADOW";
		case GL_TEXTURE_GATHER:
			return "GL_TEXTURE_GATHER";
		case GL_TEXTURE_GATHER_SHADOW:
			return "GL_TEXTURE_GATHER_SHADOW";
		case GL_SHADER_IMAGE_LOAD:
			return "GL_SHADER_IMAGE_LOAD";
		case GL_SHADER_IMAGE_STORE:
			return "GL_SHADER_IMAGE_STORE";
		case GL_SHADER_IMAGE_ATOMIC:
			return "GL_SHADER_IMAGE_ATOMIC";
		case GL_SAMPLES:
			return "GL_SAMPLES";
		case GL_MAX_WIDTH:
			return "GL_MAX_WIDTH";
		case GL_MAX_HEIGHT:
			return "GL_MAX_HEIGHT";
		case GL_MAX_DEPTH:
			return "GL_MAX_DEPTH";
		case GL_MAX_LAYERS:
			return "GL_MAX_LAYERS";
		case GL_IMAGE_TEXEL_SIZE:
			return "GL_IMAGE_TEXEL_SIZE";
		default:
			return "GlFormatProperty_UNKNOWN";
		}
	}
}
