/*
This file belongs to Renderer.
See LICENSE file in root folder.
*/
#pragma once

#include <UtilsMapping.hpp>

namespace gl_renderer
{
	enum GlInternal
		: GLenum
	{
		GL_INTERNAL_R8G8B8 = 0x8051,
		GL_INTERNAL_R8G8B8A8 = 0x8058,
		GL_INTERNAL_R4G4B4A4 = 0x8056,
		GL_INTERNAL_R5G5B5A1 = 0x8057,
		GL_INTERNAL_D16 = 0x81A5,
		GL_INTERNAL_D24 = 0x81A6,
		GL_INTERNAL_D32 = 0x81A7,
		GL_INTERNAL_R8 = 0x8229,
		GL_INTERNAL_R8G8 = 0x822B,
		GL_INTERNAL_R16F = 0x822D,
		GL_INTERNAL_R32F = 0x822E,
		GL_INTERNAL_RG16F = 0x822F,
		GL_INTERNAL_RG32F = 0x8230,
		GL_INTERNAL_DXT1 = 0x83F1,
		GL_INTERNAL_DXT3 = 0x83F2,
		GL_INTERNAL_DXT5 = 0x83F3,
		GL_INTERNAL_D24S8 = 0x88F0,
		GL_INTERNAL_RGBA32F = 0x8814,
		GL_INTERNAL_RGB32F = 0x8815,
		GL_INTERNAL_RGBA16F = 0x881A,
		GL_INTERNAL_RGB16F = 0x881B,
		GL_INTERNAL_R8G8B8_SRGB = 0x8C41,
		GL_INTERNAL_R8G8B8A8_SRGB = 0x8C43,
		GL_INTERNAL_D32F = 0x8CAC,
		GL_INTERNAL_D32FS8 = 0x8CAD,
		GL_INTERNAL_S1 = 0x8D46,
		GL_INTERNAL_S8 = 0x8D48,
		GL_INTERNAL_R5G6B5 = 0x8D62,
		GL_INTERNAL_B8G8R8A8 = 0x93A1,
		GL_INTERNAL_RGB_S3TC_DXT1 = 0x83F0,
		GL_INTERNAL_RGBA_S3TC_DXT1 = 0x83F1,
		GL_INTERNAL_RGBA_S3TC_DXT3 = 0x83F2,
		GL_INTERNAL_RGBA_S3TC_DXT5 = 0x83F3,
		GL_INTERNAL_SRGB_S3TC_DXT1 = 0x8C4C,
		GL_INTERNAL_SRGB_ALPHA_S3TC_DXT1 = 0x8C4D,
		GL_INTERNAL_SRGB_ALPHA_S3TC_DXT3 = 0x8C4E,
		GL_INTERNAL_SRGB_ALPHA_S3TC_DXT5 = 0x8C4F,
		GL_INTERNAL_RED_RGTC1 = 0x8DBB,
		GL_INTERNAL_SIGNED_RED_RGTC1 = 0x8DBC,
		GL_INTERNAL_RG_RGTC2 = 0x8DBD,
		GL_INTERNAL_SIGNED_RG_RGTC2 = 0x8DBE,
		GL_INTERNAL_RGB8_ETC2 = 0x9274,
		GL_INTERNAL_SRGB8_ETC2 = 0x9275,
		GL_INTERNAL_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,
		GL_INTERNAL_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,
		GL_INTERNAL_RGBA8_ETC2_EAC = 0x9278,
		GL_INTERNAL_SRGB8_ALPHA8_ETC2_EAC = 0x9279,
		GL_INTERNAL_R11_EAC = 0x9270,
		GL_INTERNAL_SIGNED_R11_EAC = 0x9271,
		GL_INTERNAL_RG11_EAC = 0x9272,
		GL_INTERNAL_SIGNED_RG11_EAC = 0x9273,
		GL_INTERNAL_RGBA_ASTC_4x4 = 0x93B0,
		GL_INTERNAL_RGBA_ASTC_5x4 = 0x93B1,
		GL_INTERNAL_RGBA_ASTC_5x5 = 0x93B2,
		GL_INTERNAL_RGBA_ASTC_6x5 = 0x93B3,
		GL_INTERNAL_RGBA_ASTC_6x6 = 0x93B4,
		GL_INTERNAL_RGBA_ASTC_8x5 = 0x93B5,
		GL_INTERNAL_RGBA_ASTC_8x6 = 0x93B6,
		GL_INTERNAL_RGBA_ASTC_8x8 = 0x93B7,
		GL_INTERNAL_RGBA_ASTC_10x5 = 0x93B8,
		GL_INTERNAL_RGBA_ASTC_10x6 = 0x93B9,
		GL_INTERNAL_RGBA_ASTC_10x8 = 0x93BA,
		GL_INTERNAL_RGBA_ASTC_10x10 = 0x93BB,
		GL_INTERNAL_RGBA_ASTC_12x10 = 0x93BC,
		GL_INTERNAL_RGBA_ASTC_12x12 = 0x93BD,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_10x8 = 0x93DA,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_10x10 = 0x93DB,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_12x10 = 0x93DC,
		GL_INTERNAL_SRGB8_ALPHA8_ASTC_12x12 = 0x93DD,
	};
	enum GlFormat
		: GLenum
	{
		GL_FORMAT_S = 0x1802,
		GL_FORMAT_D = 0x1902,
		GL_FORMAT_R = 0x1903,
		GL_FORMAT_RGB = 0x1907,
		GL_FORMAT_RGBA = 0x1908,
		GL_FORMAT_ABGR = 0x8000,
		GL_FORMAT_BGR = 0x80E0,
		GL_FORMAT_BGRA = 0x80E1,
		GL_FORMAT_RG = 0x8227,
		GL_FORMAT_DS = 0x84F9,
	};
	enum GlType
		: GLenum
	{
		GL_TYPE_UI8 = 0x1401,
		GL_TYPE_UI16 = 0x1403,
		GL_TYPE_UI32 = 0x1405,
		GL_TYPE_F = 0x1406,
		GL_TYPE_US4444 = 0x8033,
		GL_TYPE_US5551 = 0x8034,
		GL_TYPE_UI8888 = 0x8035,
		GL_TYPE_UI565 = 0x8363,
		GL_TYPE_UI24_8 = 0x84FA,
		GL_TYPE_32F_UI24_8 = 0x8DAD
	};
	std::string getName( GlInternal value );
	std::string getName( GlFormat value );
	std::string getName( GlType value );
	/**
	*\brief
	*	Convertit un renderer::PixelFormat en GlInternal.
	*\param[in] format
	*	Le renderer::PixelFormat.
	*\return
	*	Le GlInternal.
	*/
	GlInternal getInternal( renderer::PixelFormat const & format )noexcept;
	/**
	*\brief
	*	Convertit un renderer::PixelFormat en GlFormat.
	*\param[in] format
	*	Le renderer::PixelFormat.
	*\return
	*	Le GlFormat.
	*/
	GlFormat getFormat( renderer::PixelFormat format )noexcept;
	/**
	*\brief
	*	Convertit un renderer::PixelFormat en GlType.
	*\param[in] format
	*	Le renderer::PixelFormat.
	*\return
	*	Le GlType.
	*/
	GlType getType( renderer::PixelFormat format )noexcept;
	/**
	*\brief
	*	Convertit un GlInternal en renderer::PixelFormat.
	*\param[in] format
	*	Le GlInternal.
	*\return
	*	Le renderer::PixelFormat.
	*/
	renderer::PixelFormat convert( GlInternal format )noexcept;
}
