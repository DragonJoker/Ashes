#include "VkRendererPrerequisites.hpp"

namespace vk_renderer
{
	VkPhysicalDeviceFeatures convert( ashes::PhysicalDeviceFeatures const & value )
	{
		return VkPhysicalDeviceFeatures
		{
			value.robustBufferAccess,
			value.fullDrawIndexUint32,
			value.imageCubeArray,
			value.independentBlend,
			value.geometryShader,
			value.tessellationShader,
			value.sampleRateShading,
			value.dualSrcBlend,
			value.logicOp,
			value.multiDrawIndirect,
			value.drawIndirectFirstInstance,
			value.depthClamp,
			value.depthBiasClamp,
			value.fillModeNonSolid,
			value.depthBounds,
			value.wideLines,
			value.largePoints,
			value.alphaToOne,
			value.multiViewport,
			value.samplerAnisotropy,
			value.textureCompressionETC2,
			value.textureCompressionASTC_LDR,
			value.textureCompressionBC,
			value.occlusionQueryPrecise,
			value.pipelineStatisticsQuery,
			value.vertexPipelineStoresAndAtomics,
			value.fragmentStoresAndAtomics,
			value.shaderTessellationAndGeometryPointSize,
			value.shaderImageGatherExtended,
			value.shaderStorageImageExtendedFormats,
			value.shaderStorageImageMultisample,
			value.shaderStorageImageReadWithoutFormat,
			value.shaderStorageImageWriteWithoutFormat,
			value.shaderUniformBufferArrayDynamicIndexing,
			value.shaderSampledImageArrayDynamicIndexing,
			value.shaderStorageBufferArrayDynamicIndexing,
			value.shaderStorageImageArrayDynamicIndexing,
			value.shaderClipDistance,
			value.shaderCullDistance,
			value.shaderFloat64,
			value.shaderInt64,
			value.shaderInt16,
			value.shaderResourceResidency,
			value.shaderResourceMinLod,
			value.sparseBinding,
			value.sparseResidencyBuffer,
			value.sparseResidencyImage2D,
			value.sparseResidencyImage3D,
			value.sparseResidency2Samples,
			value.sparseResidency4Samples,
			value.sparseResidency8Samples,
			value.sparseResidency16Samples,
			value.sparseResidencyAliased,
			value.variableMultisampleRate,
			value.inheritedQueries,
		};
	}
}
